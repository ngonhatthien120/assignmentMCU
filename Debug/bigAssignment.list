
bigAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab4  08003ab4  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab4  08003ab4  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08003abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000e4  08003ba0  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003ba0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caaa  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002105  00000000  00000000  0002cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ae  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7f8  00000000  00000000  0004891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad7b  00000000  00000000  00056116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003788  00000000  00000000  000e0ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a34 	.word	0x08003a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	08003a34 	.word	0x08003a34

0800014c <isButtonNPressed>:
int KeyReg2[MAX_BUTTONS] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTONS] = { NORMAL_STATE };

int TimerForKeyPress[MAX_BUTTONS] = { 100 };

int isButtonNPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonN_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonNPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonNPressed+0x22>
		buttonN_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonNPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonNPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000100 	.word	0x20000100

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	buttonN_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000100 	.word	0x20000100

080001a0 <readPin>:
int readPin(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b03      	cmp	r3, #3
 80001ac:	d822      	bhi.n	80001f4 <readPin+0x54>
 80001ae:	a201      	add	r2, pc, #4	; (adr r2, 80001b4 <readPin+0x14>)
 80001b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b4:	080001c5 	.word	0x080001c5
 80001b8:	080001d1 	.word	0x080001d1
 80001bc:	080001dd 	.word	0x080001dd
 80001c0:	080001e9 	.word	0x080001e9
	switch (index) {
	case 0:
		return HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80001c4:	2102      	movs	r1, #2
 80001c6:	480e      	ldr	r0, [pc, #56]	; (8000200 <readPin+0x60>)
 80001c8:	f001 fa68 	bl	800169c <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e013      	b.n	80001f8 <readPin+0x58>
		break;
	case 1:
		return HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 80001d0:	2120      	movs	r1, #32
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <readPin+0x60>)
 80001d4:	f001 fa62 	bl	800169c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	e00d      	b.n	80001f8 <readPin+0x58>
		break;
	case 2:
		return HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin);
 80001dc:	2101      	movs	r1, #1
 80001de:	4809      	ldr	r0, [pc, #36]	; (8000204 <readPin+0x64>)
 80001e0:	f001 fa5c 	bl	800169c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	e007      	b.n	80001f8 <readPin+0x58>
		break;
	case 3:
		return HAL_GPIO_ReadPin(BTN_PES_GPIO_Port, BTN_PES_Pin);
 80001e8:	2101      	movs	r1, #1
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <readPin+0x60>)
 80001ec:	f001 fa56 	bl	800169c <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	e001      	b.n	80001f8 <readPin+0x58>
	default:
		break;
 80001f4:	bf00      	nop
	}
	return 0;
 80001f6:	2300      	movs	r3, #0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010800 	.word	0x40010800
 8000204:	40010c00 	.word	0x40010c00

08000208 <getKeyInput>:
void getKeyInput() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTONS; i++) {
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e063      	b.n	80002dc <getKeyInput+0xd4>
		KeyReg0[i] = KeyReg1[i];
 8000214:	4a35      	ldr	r2, [pc, #212]	; (80002ec <getKeyInput+0xe4>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	4934      	ldr	r1, [pc, #208]	; (80002f0 <getKeyInput+0xe8>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000224:	4a33      	ldr	r2, [pc, #204]	; (80002f4 <getKeyInput+0xec>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	492f      	ldr	r1, [pc, #188]	; (80002ec <getKeyInput+0xe4>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = readPin(i);
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	f7ff ffb3 	bl	80001a0 <readPin>
 800023a:	4602      	mov	r2, r0
 800023c:	492d      	ldr	r1, [pc, #180]	; (80002f4 <getKeyInput+0xec>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000244:	4a2a      	ldr	r2, [pc, #168]	; (80002f0 <getKeyInput+0xe8>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4927      	ldr	r1, [pc, #156]	; (80002ec <getKeyInput+0xe4>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000254:	429a      	cmp	r2, r3
 8000256:	d13e      	bne.n	80002d6 <getKeyInput+0xce>
 8000258:	4a24      	ldr	r2, [pc, #144]	; (80002ec <getKeyInput+0xe4>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	4924      	ldr	r1, [pc, #144]	; (80002f4 <getKeyInput+0xec>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000268:	429a      	cmp	r2, r3
 800026a:	d134      	bne.n	80002d6 <getKeyInput+0xce>
			if (KeyReg3[i] != KeyReg2[i]) {
 800026c:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <getKeyInput+0xf0>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	491f      	ldr	r1, [pc, #124]	; (80002f4 <getKeyInput+0xec>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027c:	429a      	cmp	r2, r3
 800027e:	d016      	beq.n	80002ae <getKeyInput+0xa6>
				KeyReg3[i] = KeyReg2[i];
 8000280:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <getKeyInput+0xec>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	491b      	ldr	r1, [pc, #108]	; (80002f8 <getKeyInput+0xf0>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <getKeyInput+0xec>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d11c      	bne.n	80002d6 <getKeyInput+0xce>
					//TODO
					subKeyProcess(i);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ff6f 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 100;
 80002a2:	4a16      	ldr	r2, [pc, #88]	; (80002fc <getKeyInput+0xf4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2164      	movs	r1, #100	; 0x64
 80002a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002ac:	e013      	b.n	80002d6 <getKeyInput+0xce>
				}
			} else {
				TimerForKeyPress[i]--;
 80002ae:	4a13      	ldr	r2, [pc, #76]	; (80002fc <getKeyInput+0xf4>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	1e5a      	subs	r2, r3, #1
 80002b8:	4910      	ldr	r1, [pc, #64]	; (80002fc <getKeyInput+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <getKeyInput+0xf4>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d104      	bne.n	80002d6 <getKeyInput+0xce>
					//TODO
					KeyReg3[i] = NORMAL_STATE;
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <getKeyInput+0xf0>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2101      	movs	r1, #1
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTONS; i++) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	dd98      	ble.n	8000214 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000010 	.word	0x20000010
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000020 	.word	0x20000020
 80002f8:	20000030 	.word	0x20000030
 80002fc:	20000040 	.word	0x20000040

08000300 <clear_tLight1>:
int currentState[2] = { 0, 1 };
int currentTimer[2] = { 0, 0 };

int currentPesState = 0;

void clear_tLight1() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(tLight1_RED_GPIO_Port, tLight1_RED_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2108      	movs	r1, #8
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <clear_tLight1+0x20>)
 800030a:	f001 f9de 	bl	80016ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tLight1_GRE_GPIO_Port, tLight1_GRE_Pin, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <clear_tLight1+0x24>)
 8000316:	f001 f9d8 	bl	80016ca <HAL_GPIO_WritePin>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40010800 	.word	0x40010800

08000328 <clear_tLight2>:
void clear_tLight2() {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(tLight2_RED_GPIO_Port, tLight2_RED_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <clear_tLight2+0x1c>)
 8000332:	f001 f9ca 	bl	80016ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tLight2_GRE_GPIO_Port, tLight2_GRE_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	2120      	movs	r1, #32
 800033a:	4802      	ldr	r0, [pc, #8]	; (8000344 <clear_tLight2+0x1c>)
 800033c:	f001 f9c5 	bl	80016ca <HAL_GPIO_WritePin>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010c00 	.word	0x40010c00

08000348 <clear_pLight>:
void clear_pLight() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pLight_RED_GPIO_Port, pLight_RED_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <clear_pLight+0x20>)
 8000354:	f001 f9b9 	bl	80016ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pLight_GRE_GPIO_Port, pLight_GRE_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035e:	4803      	ldr	r0, [pc, #12]	; (800036c <clear_pLight+0x24>)
 8000360:	f001 f9b3 	bl	80016ca <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010800 	.word	0x40010800
 800036c:	40010c00 	.word	0x40010c00

08000370 <currentState_update>:

void currentState_update(int index) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	//0 for tLight1, 1 for tLight2
	currentTimer[index] = LED_TIME[currentState[index]];
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <currentState_update+0x50>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <currentState_update+0x54>)
 8000382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000386:	4910      	ldr	r1, [pc, #64]	; (80003c8 <currentState_update+0x58>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	currentState[index] = currentState[index] + 1;
 800038e:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <currentState_update+0x50>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <currentState_update+0x50>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (currentState[index] >= 3)
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <currentState_update+0x50>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	dd04      	ble.n	80003b6 <currentState_update+0x46>
		currentState[index] = 0;
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <currentState_update+0x50>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2100      	movs	r1, #0
 80003b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	20000064 	.word	0x20000064
 80003c4:	20000058 	.word	0x20000058
 80003c8:	20000110 	.word	0x20000110

080003cc <tLight1_processing>:

void tLight1_processing() {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	clear_tLight1();
 80003d0:	f7ff ff96 	bl	8000300 <clear_tLight1>
	switch (currentState[0]) {
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <tLight1_processing+0x44>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d016      	beq.n	800040a <tLight1_processing+0x3e>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dc15      	bgt.n	800040c <tLight1_processing+0x40>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <tLight1_processing+0x1e>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d008      	beq.n	80003fa <tLight1_processing+0x2e>
	case YEL_IDX:
//		HAL_GPIO_WritePin( tLight1_RED_GPIO_Port, RED[0], GPIO_PIN_SET);
//		HAL_GPIO_WritePin( tLight1_GREEN_GPIO_Port, GRE[0], GPIO_PIN_SET);
		break;
	}
}
 80003e8:	e010      	b.n	800040c <tLight1_processing+0x40>
		HAL_GPIO_WritePin( tLight1_RED_GPIO_Port, RED[0], GPIO_PIN_RESET);
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <tLight1_processing+0x48>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	2200      	movs	r2, #0
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <tLight1_processing+0x4c>)
 80003f4:	f001 f969 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 80003f8:	e008      	b.n	800040c <tLight1_processing+0x40>
		HAL_GPIO_WritePin( tLight1_GRE_GPIO_Port, GRE[0], GPIO_PIN_RESET);
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <tLight1_processing+0x50>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	4807      	ldr	r0, [pc, #28]	; (8000420 <tLight1_processing+0x54>)
 8000404:	f001 f961 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 8000408:	e000      	b.n	800040c <tLight1_processing+0x40>
		break;
 800040a:	bf00      	nop
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000064 	.word	0x20000064
 8000414:	20000050 	.word	0x20000050
 8000418:	40010c00 	.word	0x40010c00
 800041c:	20000054 	.word	0x20000054
 8000420:	40010800 	.word	0x40010800

08000424 <tLight2_processing>:
void tLight2_processing() {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	clear_tLight2();
 8000428:	f7ff ff7e 	bl	8000328 <clear_tLight2>
	switch (currentState[1]) {
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <tLight2_processing+0x44>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d015      	beq.n	8000460 <tLight2_processing+0x3c>
 8000434:	2b02      	cmp	r3, #2
 8000436:	dc14      	bgt.n	8000462 <tLight2_processing+0x3e>
 8000438:	2b00      	cmp	r3, #0
 800043a:	d009      	beq.n	8000450 <tLight2_processing+0x2c>
 800043c:	2b01      	cmp	r3, #1
 800043e:	d110      	bne.n	8000462 <tLight2_processing+0x3e>
	case GRE_IDX:
		HAL_GPIO_WritePin( tLight2_GRE_GPIO_Port, GRE[1], GPIO_PIN_RESET);
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <tLight2_processing+0x48>)
 8000442:	885b      	ldrh	r3, [r3, #2]
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <tLight2_processing+0x4c>)
 800044a:	f001 f93e 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 800044e:	e008      	b.n	8000462 <tLight2_processing+0x3e>
	case YEL_IDX:
//		HAL_GPIO_WritePin( tLight1_RED_GPIO_Port, RED[1], GPIO_PIN_SET);
//		HAL_GPIO_WritePin( tLight1_GREEN_GPIO_Port, GRE[1], GPIO_PIN_SET);
		break;
	case RED_IDX:
		HAL_GPIO_WritePin( tLight2_RED_GPIO_Port, RED[1], GPIO_PIN_RESET);
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <tLight2_processing+0x50>)
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <tLight2_processing+0x4c>)
 800045a:	f001 f936 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 800045e:	e000      	b.n	8000462 <tLight2_processing+0x3e>
		break;
 8000460:	bf00      	nop
	}
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000064 	.word	0x20000064
 800046c:	20000054 	.word	0x20000054
 8000470:	40010c00 	.word	0x40010c00
 8000474:	20000050 	.word	0x20000050

08000478 <pLight_processing>:

void pLight_processing() {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	switch (currentPesState) {
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <pLight_processing+0x50>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d012      	beq.n	80004aa <pLight_processing+0x32>
 8000484:	2b02      	cmp	r3, #2
 8000486:	dc1d      	bgt.n	80004c4 <pLight_processing+0x4c>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d00e      	beq.n	80004aa <pLight_processing+0x32>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d119      	bne.n	80004c4 <pLight_processing+0x4c>
	case GRE_IDX:
		HAL_GPIO_WritePin(pLight_GRE_GPIO_Port, pLight_GRE_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <pLight_processing+0x54>)
 8000498:	f001 f917 	bl	80016ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pLight_RED_GPIO_Port, pLight_RED_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <pLight_processing+0x58>)
 80004a4:	f001 f911 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 80004a8:	e00c      	b.n	80004c4 <pLight_processing+0x4c>
	case RED_IDX:  case YEL_IDX:
		HAL_GPIO_WritePin(pLight_RED_GPIO_Port, pLight_RED_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <pLight_processing+0x58>)
 80004b2:	f001 f90a 	bl	80016ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pLight_GRE_GPIO_Port, pLight_GRE_Pin, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <pLight_processing+0x54>)
 80004be:	f001 f904 	bl	80016ca <HAL_GPIO_WritePin>
		break;
 80004c2:	bf00      	nop

	}

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000118 	.word	0x20000118
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40010800 	.word	0x40010800

080004d4 <automatic_LED>:

void automatic_LED() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	if (timer_tLight1_flag == 1) {
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <automatic_LED+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d109      	bne.n	80004f4 <automatic_LED+0x20>
		tLight1_processing();
 80004e0:	f7ff ff74 	bl	80003cc <tLight1_processing>
		currentState_update(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff43 	bl	8000370 <currentState_update>
		setTimer_tLight1(currentTimer[0]); //setTimer for run
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <automatic_LED+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fb8c 	bl	8000c0c <setTimer_tLight1>
	}
	if (timer_tLight2_flag == 1) {
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <automatic_LED+0x48>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d109      	bne.n	8000510 <automatic_LED+0x3c>
		tLight2_processing();
 80004fc:	f7ff ff92 	bl	8000424 <tLight2_processing>
		currentState_update(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff ff35 	bl	8000370 <currentState_update>
		setTimer_tLight2(currentTimer[1]);
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <automatic_LED+0x44>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fb9a 	bl	8000c44 <setTimer_tLight2>
	}
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000012c 	.word	0x2000012c
 8000518:	20000110 	.word	0x20000110
 800051c:	20000134 	.word	0x20000134

08000520 <switchLED>:

void switchLED() {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	if (currentState[0] - 1 == RED_IDX) {
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <switchLED+0x90>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d11e      	bne.n	800056a <switchLED+0x4a>
		tLight2_processing();
 800052c:	f7ff ff7a 	bl	8000424 <tLight2_processing>
		currentState_update(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ff1d 	bl	8000370 <currentState_update>
		setTimer_tLight2(currentTimer[1]);
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <switchLED+0x94>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb82 	bl	8000c44 <setTimer_tLight2>

		if (currentState[1] - 1 == RED_IDX) {
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <switchLED+0x90>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10a      	bne.n	800055e <switchLED+0x3e>
			tLight1_processing();
 8000548:	f7ff ff40 	bl	80003cc <tLight1_processing>
			currentState_update(0);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff0f 	bl	8000370 <currentState_update>
			setTimer_tLight1(currentTimer[0]);
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <switchLED+0x94>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fb58 	bl	8000c0c <setTimer_tLight1>
			return;
 800055c:	e027      	b.n	80005ae <switchLED+0x8e>
		}
		setTimer_tLight1(currentTimer[1]);
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <switchLED+0x94>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fb52 	bl	8000c0c <setTimer_tLight1>
 8000568:	e021      	b.n	80005ae <switchLED+0x8e>
	} else if (currentState[1] - 1 == RED_IDX) {
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <switchLED+0x90>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d11d      	bne.n	80005ae <switchLED+0x8e>

		tLight1_processing();
 8000572:	f7ff ff2b 	bl	80003cc <tLight1_processing>
		currentState_update(0);
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff fefa 	bl	8000370 <currentState_update>
		setTimer_tLight1(currentTimer[0]);
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <switchLED+0x94>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fb43 	bl	8000c0c <setTimer_tLight1>
		if (currentState[0] - 1 == RED_IDX) {
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <switchLED+0x90>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10a      	bne.n	80005a4 <switchLED+0x84>
			tLight2_processing();
 800058e:	f7ff ff49 	bl	8000424 <tLight2_processing>
			currentState_update(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff feec 	bl	8000370 <currentState_update>
			setTimer_tLight2(currentTimer[1]);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <switchLED+0x94>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fb51 	bl	8000c44 <setTimer_tLight2>
			return;
 80005a2:	e004      	b.n	80005ae <switchLED+0x8e>
		}
		setTimer_tLight2(currentTimer[0]);
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <switchLED+0x94>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fb4b 	bl	8000c44 <setTimer_tLight2>
	}
}
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000064 	.word	0x20000064
 80005b4:	20000110 	.word	0x20000110

080005b8 <turningLED>:

void turningLED() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	switch (currentState[0]) {
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <turningLED+0x94>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d006      	beq.n	80005d2 <turningLED+0x1a>
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	dc12      	bgt.n	80005ee <turningLED+0x36>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <turningLED+0x1a>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d007      	beq.n	80005e0 <turningLED+0x28>
		break;
	case GRE_IDX:
		LED_TIME[GRE_IDX] = LED_TIME[GRE_IDX] + (1 * 1000);
		break;
	default:
		break;
 80005d0:	e00d      	b.n	80005ee <turningLED+0x36>
		LED_TIME[RED_IDX] = LED_TIME[RED_IDX] + (1 * 1000);
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <turningLED+0x98>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005da:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <turningLED+0x98>)
 80005dc:	6013      	str	r3, [r2, #0]
		break;
 80005de:	e007      	b.n	80005f0 <turningLED+0x38>
		LED_TIME[GRE_IDX] = LED_TIME[GRE_IDX] + (1 * 1000);
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <turningLED+0x98>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005e8:	4a19      	ldr	r2, [pc, #100]	; (8000650 <turningLED+0x98>)
 80005ea:	6053      	str	r3, [r2, #4]
		break;
 80005ec:	e000      	b.n	80005f0 <turningLED+0x38>
		break;
 80005ee:	bf00      	nop
	}
	switch (currentState[1]) {
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <turningLED+0x94>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d006      	beq.n	8000606 <turningLED+0x4e>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	dc12      	bgt.n	8000622 <turningLED+0x6a>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <turningLED+0x4e>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d007      	beq.n	8000614 <turningLED+0x5c>
		break;
	case GRE_IDX:
		LED_TIME[GRE_IDX] = LED_TIME[GRE_IDX] + (1 * 1000);
		break;
	default:
		break;
 8000604:	e00d      	b.n	8000622 <turningLED+0x6a>
		LED_TIME[RED_IDX] = LED_TIME[RED_IDX] + (1 * 1000);
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <turningLED+0x98>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <turningLED+0x98>)
 8000610:	6013      	str	r3, [r2, #0]
		break;
 8000612:	e007      	b.n	8000624 <turningLED+0x6c>
		LED_TIME[GRE_IDX] = LED_TIME[GRE_IDX] + (1 * 1000);
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <turningLED+0x98>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <turningLED+0x98>)
 800061e:	6053      	str	r3, [r2, #4]
		break;
 8000620:	e000      	b.n	8000624 <turningLED+0x6c>
		break;
 8000622:	bf00      	nop
	}
	timer_tLight1_flag = 1;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <turningLED+0x9c>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
	timer_tLight2_flag = 1;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <turningLED+0xa0>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
	currentState[0]--;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <turningLED+0x94>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <turningLED+0x94>)
 8000638:	6013      	str	r3, [r2, #0]
	currentState[1]--;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <turningLED+0x94>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	4a02      	ldr	r2, [pc, #8]	; (800064c <turningLED+0x94>)
 8000642:	6053      	str	r3, [r2, #4]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000064 	.word	0x20000064
 8000650:	20000058 	.word	0x20000058
 8000654:	2000012c 	.word	0x2000012c
 8000658:	20000134 	.word	0x20000134

0800065c <pesLED_NORMAL>:

void pesLED_NORMAL() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	clear_pLight();
 8000660:	f7ff fe72 	bl	8000348 <clear_pLight>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <pesLED_ACTION>:
void pesLED_ACTION() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if (currentState[0] == GRE_IDX) {
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <pesLED_ACTION+0x54>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d114      	bne.n	800069e <pesLED_ACTION+0x36>
		currentPesState = GRE_IDX;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <pesLED_ACTION+0x58>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
		buzzer(buz);
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <pesLED_ACTION+0x5c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f8d4 	bl	800082c <buzzer>
		if(timer_buzzer_flag == 1) {
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <pesLED_ACTION+0x60>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d113      	bne.n	80006b4 <pesLED_ACTION+0x4c>
			buz/= 2;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <pesLED_ACTION+0x5c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	0fda      	lsrs	r2, r3, #31
 8000692:	4413      	add	r3, r2
 8000694:	105b      	asrs	r3, r3, #1
 8000696:	461a      	mov	r2, r3
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <pesLED_ACTION+0x5c>)
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e00a      	b.n	80006b4 <pesLED_ACTION+0x4c>
		}
	} else if (currentState[0] == YEL_IDX) {
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <pesLED_ACTION+0x54>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d103      	bne.n	80006ae <pesLED_ACTION+0x46>
		currentPesState = RED_IDX;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <pesLED_ACTION+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	e002      	b.n	80006b4 <pesLED_ACTION+0x4c>
	} else {
		currentPesState = YEL_IDX;
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <pesLED_ACTION+0x58>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
	}
	pLight_processing();
 80006b4:	f7ff fee0 	bl	8000478 <pLight_processing>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000064 	.word	0x20000064
 80006c0:	20000118 	.word	0x20000118
 80006c4:	20000070 	.word	0x20000070
 80006c8:	20000144 	.word	0x20000144

080006cc <fsm_run>:
#include "software_timer.h"
#include "fsm_buttons.h"
#include "global.h"
#include "display_trafficLed.h"

void fsm_run() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch (status) {
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <fsm_run+0x3c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d00f      	beq.n	80006f8 <fsm_run+0x2c>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dc12      	bgt.n	8000702 <fsm_run+0x36>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <fsm_run+0x1a>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d003      	beq.n	80006ec <fsm_run+0x20>
		break;
	case TURNING:
		turningLED();
		status = AUTOMATIC;
	default:
		break;
 80006e4:	e00d      	b.n	8000702 <fsm_run+0x36>
		automatic_LED();
 80006e6:	f7ff fef5 	bl	80004d4 <automatic_LED>
		break;
 80006ea:	e00b      	b.n	8000704 <fsm_run+0x38>
		switchLED();
 80006ec:	f7ff ff18 	bl	8000520 <switchLED>
		status = AUTOMATIC;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <fsm_run+0x3c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		break;
 80006f6:	e005      	b.n	8000704 <fsm_run+0x38>
		turningLED();
 80006f8:	f7ff ff5e 	bl	80005b8 <turningLED>
		status = AUTOMATIC;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <fsm_run+0x3c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
		break;
 8000702:	bf00      	nop
	}
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000011c 	.word	0x2000011c

0800070c <fsm_pesRUN>:

void fsm_pesRUN(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	switch (status_1) {
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <fsm_pesRUN+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d002      	beq.n	800071e <fsm_pesRUN+0x12>
 8000718:	2b04      	cmp	r3, #4
 800071a:	d003      	beq.n	8000724 <fsm_pesRUN+0x18>
		if(timer_pes_flag == 1) {
			status_1 = NORMAL;
		}
		break;
	default:
		break;
 800071c:	e013      	b.n	8000746 <fsm_pesRUN+0x3a>
		pesLED_NORMAL();
 800071e:	f7ff ff9d 	bl	800065c <pesLED_NORMAL>
		break;
 8000722:	e010      	b.n	8000746 <fsm_pesRUN+0x3a>
		pesLED_ACTION();
 8000724:	f7ff ffa0 	bl	8000668 <pesLED_ACTION>
		buz = 999;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <fsm_pesRUN+0x44>)
 800072a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072e:	601a      	str	r2, [r3, #0]
		setTimer_buzzer(250);
 8000730:	20fa      	movs	r0, #250	; 0xfa
 8000732:	f000 facd 	bl	8000cd0 <setTimer_buzzer>
		if(timer_pes_flag == 1) {
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <fsm_pesRUN+0x48>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d102      	bne.n	8000744 <fsm_pesRUN+0x38>
			status_1 = NORMAL;
 800073e:	4b03      	ldr	r3, [pc, #12]	; (800074c <fsm_pesRUN+0x40>)
 8000740:	2203      	movs	r2, #3
 8000742:	601a      	str	r2, [r3, #0]
		break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000006c 	.word	0x2000006c
 8000750:	20000070 	.word	0x20000070
 8000754:	2000013c 	.word	0x2000013c

08000758 <fsm_simple_buttons_run>:
#include "button.h"
#include"software_timer.h"
#include "global.h"
#include "display_trafficLed.h"

void fsm_simple_buttons_run (){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	//AUTOMATIC
	if (isButtonNPressed(0) == 1) {
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fcf5 	bl	800014c <isButtonNPressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d102      	bne.n	800076e <fsm_simple_buttons_run+0x16>
		status = AUTOMATIC;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <fsm_simple_buttons_run+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
	}
	//MANUAL
	if (isButtonNPressed(1) == 1) {
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fcec 	bl	800014c <isButtonNPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d102      	bne.n	8000780 <fsm_simple_buttons_run+0x28>
		status = MANUAL;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <fsm_simple_buttons_run+0x58>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
	}
	//TURNING
	if (isButtonNPressed(2) == 1) {
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fce3 	bl	800014c <isButtonNPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d102      	bne.n	8000792 <fsm_simple_buttons_run+0x3a>
		status = TURNING;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <fsm_simple_buttons_run+0x58>)
 800078e:	2202      	movs	r2, #2
 8000790:	601a      	str	r2, [r3, #0]

	}
	if (isButtonNPressed(3) == 1) {
 8000792:	2003      	movs	r0, #3
 8000794:	f7ff fcda 	bl	800014c <isButtonNPressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d106      	bne.n	80007ac <fsm_simple_buttons_run+0x54>
		setTimer_PES(5000);
 800079e:	f241 3088 	movw	r0, #5000	; 0x1388
 80007a2:	f000 fa6b 	bl	8000c7c <setTimer_PES>
		status_1 = ACTION;
 80007a6:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <fsm_simple_buttons_run+0x5c>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	601a      	str	r2, [r3, #0]
	}

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000011c 	.word	0x2000011c
 80007b4:	2000006c 	.word	0x2000006c

080007b8 <showTimer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[40] ;

void showTimer() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	if(TIME %100 == 0) {
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <showTimer+0x60>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <showTimer+0x64>)
 80007c4:	fb83 1302 	smull	r1, r3, r3, r2
 80007c8:	1159      	asrs	r1, r3, #5
 80007ca:	17d3      	asrs	r3, r2, #31
 80007cc:	1acb      	subs	r3, r1, r3
 80007ce:	2164      	movs	r1, #100	; 0x64
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d119      	bne.n	800080e <showTimer+0x56>
			int value = TIME/100 - 1;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <showTimer+0x60>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <showTimer+0x64>)
 80007e0:	fb82 1203 	smull	r1, r2, r2, r3
 80007e4:	1152      	asrs	r2, r2, #5
 80007e6:	17db      	asrs	r3, r3, #31
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	3b01      	subs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
			if(value >= 0){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0c      	blt.n	800080e <showTimer+0x56>
			HAL_UART_Transmit(&huart2, (void*) str,
								sprintf(str, "TIME = %d \r", value), 1000);
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	490a      	ldr	r1, [pc, #40]	; (8000820 <showTimer+0x68>)
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <showTimer+0x6c>)
 80007fa:	f002 fce1 	bl	80031c0 <siprintf>
 80007fe:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (void*) str,
 8000800:	b29a      	uxth	r2, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	4907      	ldr	r1, [pc, #28]	; (8000824 <showTimer+0x6c>)
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <showTimer+0x70>)
 800080a:	f002 fb3c 	bl	8002e86 <HAL_UART_Transmit>
			}
				}
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000124 	.word	0x20000124
 800081c:	51eb851f 	.word	0x51eb851f
 8000820:	08003a4c 	.word	0x08003a4c
 8000824:	20000228 	.word	0x20000228
 8000828:	200001e4 	.word	0x200001e4

0800082c <buzzer>:

void buzzer(int buz){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, buz);
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <buzzer+0x1c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000154 	.word	0x20000154

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fc30 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f82c 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f958 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM2_Init();
 800085c:	f000 f86a 	bl	8000934 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000860:	f000 f92a 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000864:	f000 f8b2 	bl	80009cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <main+0x54>)
 800086a:	f001 fbb1 	bl	8001fd0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800086e:	2100      	movs	r1, #0
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <main+0x58>)
 8000872:	f001 fc57 	bl	8002124 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setTimer_tLight1(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f000 f9c8 	bl	8000c0c <setTimer_tLight1>
	setTimer_tLight2(200);
 800087c:	20c8      	movs	r0, #200	; 0xc8
 800087e:	f000 f9e1 	bl	8000c44 <setTimer_tLight2>
	status = AUTOMATIC;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <main+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
		status_1 = NORMAL;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <main+0x60>)
 800088a:	2203      	movs	r2, #3
 800088c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		fsm_simple_buttons_run();
 800088e:	f7ff ff63 	bl	8000758 <fsm_simple_buttons_run>
		fsm_run();
 8000892:	f7ff ff1b 	bl	80006cc <fsm_run>
		fsm_pesRUN();
 8000896:	f7ff ff39 	bl	800070c <fsm_pesRUN>
		showTimer();
 800089a:	f7ff ff8d 	bl	80007b8 <showTimer>
		fsm_simple_buttons_run();
 800089e:	e7f6      	b.n	800088e <main+0x42>
 80008a0:	2000019c 	.word	0x2000019c
 80008a4:	20000154 	.word	0x20000154
 80008a8:	2000011c 	.word	0x2000011c
 80008ac:	2000006c 	.word	0x2000006c

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	; 0x40
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2228      	movs	r2, #40	; 0x28
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fc76 	bl	80031b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008da:	2310      	movs	r3, #16
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 ff03 	bl	80016fc <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008fc:	f000 f980 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f96e 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000926:	f000 f96b 	bl	8000c00 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM2_Init+0x94>)
 800095a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800095e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000968:	220a      	movs	r2, #10
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_TIM2_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_TIM2_Init+0x94>)
 800097a:	f001 fad9 	bl	8001f30 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000984:	f000 f93c 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000996:	f001 fe2d 	bl	80025f4 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 f92e 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM2_Init+0x94>)
 80009b2:	f002 f9ab 	bl	8002d0c <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f920 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000019c 	.word	0x2000019c

080009cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <MX_TIM3_Init+0xe8>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a04:	223f      	movs	r2, #63	; 0x3f
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a22:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a24:	f001 fa84 	bl	8001f30 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a2e:	f000 f8e7 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a40:	f001 fdd8 	bl	80025f4 <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a4a:	f000 f8d9 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a4e:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a50:	f001 fb10 	bl	8002074 <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a5a:	f000 f8d1 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a6e:	f002 f94d 	bl	8002d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a78:	f000 f8c2 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000a94:	f001 fcf0 	bl	8002478 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a9e:	f000 f8af 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM3_Init+0xe4>)
 8000aa4:	f000 f9f6 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	; 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000154 	.word	0x20000154
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f002 f97c 	bl	8002dec <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f881 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001e4 	.word	0x200001e4
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <MX_GPIO_Init+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pLight_GRE_Pin|tLight1_RED_Pin|tLight2_RED_Pin|tLight2_GRE_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b56:	4822      	ldr	r0, [pc, #136]	; (8000be0 <MX_GPIO_Init+0xd4>)
 8000b58:	f000 fdb7 	bl	80016ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pLight_RED_Pin|tLight1_GRE_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b62:	4820      	ldr	r0, [pc, #128]	; (8000be4 <MX_GPIO_Init+0xd8>)
 8000b64:	f000 fdb1 	bl	80016ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_PES_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_PES_Pin|BTN_1_Pin|BTN_2_Pin;
 8000b68:	2323      	movs	r3, #35	; 0x23
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0xd8>)
 8000b7c:	f000 fc0a 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8000b80:	2301      	movs	r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <MX_GPIO_Init+0xd4>)
 8000b94:	f000 fbfe 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : pLight_GRE_Pin tLight1_RED_Pin tLight2_RED_Pin tLight2_GRE_Pin */
  GPIO_InitStruct.Pin = pLight_GRE_Pin|tLight1_RED_Pin|tLight2_RED_Pin|tLight2_GRE_Pin;
 8000b98:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0xd4>)
 8000bb2:	f000 fbef 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : pLight_RED_Pin tLight1_GRE_Pin */
  GPIO_InitStruct.Pin = pLight_RED_Pin|tLight1_GRE_Pin;
 8000bb6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0xd8>)
 8000bd0:	f000 fbe0 	bl	8001394 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40010800 	.word	0x40010800

08000be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bf0:	f000 f88a 	bl	8000d08 <timerRun>
	getKeyInput();
 8000bf4:	f7ff fb08 	bl	8000208 <getKeyInput>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <setTimer_tLight1>:
int timer_pes_flag = 0;

int timer_buzzer_counter = 0;
int timer_buzzer_flag = 0;

void setTimer_tLight1(int duration) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	timer_tLight1_counter = duration/TIMER_CYCLE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <setTimer_tLight1+0x2c>)
 8000c18:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1c:	1092      	asrs	r2, r2, #2
 8000c1e:	17db      	asrs	r3, r3, #31
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <setTimer_tLight1+0x30>)
 8000c24:	6013      	str	r3, [r2, #0]
	timer_tLight1_flag = 0;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <setTimer_tLight1+0x34>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	66666667 	.word	0x66666667
 8000c3c:	20000128 	.word	0x20000128
 8000c40:	2000012c 	.word	0x2000012c

08000c44 <setTimer_tLight2>:
void setTimer_tLight2(int duration) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	timer_tLight2_counter = duration/TIMER_CYCLE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <setTimer_tLight2+0x2c>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	1092      	asrs	r2, r2, #2
 8000c56:	17db      	asrs	r3, r3, #31
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <setTimer_tLight2+0x30>)
 8000c5c:	6013      	str	r3, [r2, #0]
	timer_tLight2_flag = 0;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <setTimer_tLight2+0x34>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	66666667 	.word	0x66666667
 8000c74:	20000130 	.word	0x20000130
 8000c78:	20000134 	.word	0x20000134

08000c7c <setTimer_PES>:
void setTimer_PES(int duration) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	timer_pes_counter = duration/TIMER_CYCLE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <setTimer_PES+0x40>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1092      	asrs	r2, r2, #2
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <setTimer_PES+0x44>)
 8000c94:	6013      	str	r3, [r2, #0]
	ADD = timer_pes_counter/100;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <setTimer_PES+0x44>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <setTimer_PES+0x48>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1152      	asrs	r2, r2, #5
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <setTimer_PES+0x4c>)
 8000ca8:	6013      	str	r3, [r2, #0]
	timer_pes_flag = 0;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <setTimer_PES+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	66666667 	.word	0x66666667
 8000cc0:	20000138 	.word	0x20000138
 8000cc4:	51eb851f 	.word	0x51eb851f
 8000cc8:	20000120 	.word	0x20000120
 8000ccc:	2000013c 	.word	0x2000013c

08000cd0 <setTimer_buzzer>:
void setTimer_buzzer(int duration) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	timer_buzzer_counter = duration/TIMER_CYCLE;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <setTimer_buzzer+0x2c>)
 8000cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce0:	1092      	asrs	r2, r2, #2
 8000ce2:	17db      	asrs	r3, r3, #31
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <setTimer_buzzer+0x30>)
 8000ce8:	6013      	str	r3, [r2, #0]
	timer_buzzer_flag = 0;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <setTimer_buzzer+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	66666667 	.word	0x66666667
 8000d00:	20000140 	.word	0x20000140
 8000d04:	20000144 	.word	0x20000144

08000d08 <timerRun>:

void timerRun() {
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	if (timer_tLight1_counter > 0) {
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <timerRun+0x94>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dd0f      	ble.n	8000d34 <timerRun+0x2c>
		TIME = timer_tLight1_counter;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <timerRun+0x94>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <timerRun+0x98>)
 8000d1a:	6013      	str	r3, [r2, #0]
		timer_tLight1_counter--;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <timerRun+0x94>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <timerRun+0x94>)
 8000d24:	6013      	str	r3, [r2, #0]
		if (timer_tLight1_counter <= 0) {
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <timerRun+0x94>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dc02      	bgt.n	8000d34 <timerRun+0x2c>
			timer_tLight1_flag = 1;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <timerRun+0x9c>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer_tLight2_counter > 0) {
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <timerRun+0xa0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dd0b      	ble.n	8000d54 <timerRun+0x4c>
		timer_tLight2_counter--;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <timerRun+0xa0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <timerRun+0xa0>)
 8000d44:	6013      	str	r3, [r2, #0]
		if (timer_tLight2_counter <= 0) {
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <timerRun+0xa0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dc02      	bgt.n	8000d54 <timerRun+0x4c>
			timer_tLight2_flag = 1;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <timerRun+0xa4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer_pes_counter > 0) {
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <timerRun+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dd0b      	ble.n	8000d74 <timerRun+0x6c>
			timer_pes_counter--;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <timerRun+0xa8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <timerRun+0xa8>)
 8000d64:	6013      	str	r3, [r2, #0]
			if (timer_pes_counter <= 0) {
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <timerRun+0xa8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dc02      	bgt.n	8000d74 <timerRun+0x6c>
				timer_pes_flag = 1;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <timerRun+0xac>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
			}
	}
	if (timer_buzzer_counter > 0) {
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <timerRun+0xb0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dd0b      	ble.n	8000d94 <timerRun+0x8c>
		timer_buzzer_counter--;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <timerRun+0xb0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <timerRun+0xb0>)
 8000d84:	6013      	str	r3, [r2, #0]
		if (timer_buzzer_counter <= 0) {
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <timerRun+0xb0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dc02      	bgt.n	8000d94 <timerRun+0x8c>
			timer_buzzer_flag = 1;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <timerRun+0xb4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
		}
}
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000128 	.word	0x20000128
 8000da0:	20000124 	.word	0x20000124
 8000da4:	2000012c 	.word	0x2000012c
 8000da8:	20000130 	.word	0x20000130
 8000dac:	20000134 	.word	0x20000134
 8000db0:	20000138 	.word	0x20000138
 8000db4:	2000013c 	.word	0x2000013c
 8000db8:	20000140 	.word	0x20000140
 8000dbc:	20000144 	.word	0x20000144

08000dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x5c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_MspInit+0x60>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_MspInit+0x60>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d114      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201c      	movs	r0, #28
 8000e54:	f000 fa67 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e58:	201c      	movs	r0, #28
 8000e5a:	f000 fa80 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e5e:	e010      	b.n	8000e82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_TIM_Base_MspInit+0x6c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10b      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_TIM_Base_MspInit+0x68>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40000400 	.word	0x40000400

08000e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_TIM_MspPostInit+0x58>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d117      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_TIM_MspPostInit+0x5c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ecc:	2340      	movs	r3, #64	; 0x40
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_TIM_MspPostInit+0x60>)
 8000ee0:	f000 fa58 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40000400 	.word	0x40000400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_UART_MspInit+0x88>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d12f      	bne.n	8000f78 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0x8c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f5c:	f000 fa1a 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f60:	2308      	movs	r3, #8
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0x90>)
 8000f74:	f000 fa0e 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 f8b5 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f001 f941 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000019c 	.word	0x2000019c

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f002 f89c 	bl	800315c <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20005000 	.word	0x20005000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000148 	.word	0x20000148
 8001058:	20000268 	.word	0x20000268

0800105c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800108e:	f7ff ffe5 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f002 f869 	bl	8003168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fbd9 	bl	800084c <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80010a4:	08003abc 	.word	0x08003abc
  ldr r2, =_sbss
 80010a8:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80010ac:	20000264 	.word	0x20000264

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f923 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe76 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f93b 	bl	800137a <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f903 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000074 	.word	0x20000074
 8001138:	2000007c 	.word	0x2000007c
 800113c:	20000078 	.word	0x20000078

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000007c 	.word	0x2000007c
 8001160:	20000250 	.word	0x20000250

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000250 	.word	0x20000250

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <__NVIC_EnableIRQ+0x34>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff90 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff2d 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff42 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff35 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e169      	b.n	800167c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a8:	2201      	movs	r2, #1
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8158 	bne.w	8001676 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4a9a      	ldr	r2, [pc, #616]	; (8001634 <HAL_GPIO_Init+0x2a0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d05e      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013d0:	4a98      	ldr	r2, [pc, #608]	; (8001634 <HAL_GPIO_Init+0x2a0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d875      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013d6:	4a98      	ldr	r2, [pc, #608]	; (8001638 <HAL_GPIO_Init+0x2a4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d058      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013dc:	4a96      	ldr	r2, [pc, #600]	; (8001638 <HAL_GPIO_Init+0x2a4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d86f      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013e2:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_GPIO_Init+0x2a8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d052      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013e8:	4a94      	ldr	r2, [pc, #592]	; (800163c <HAL_GPIO_Init+0x2a8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d869      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013ee:	4a94      	ldr	r2, [pc, #592]	; (8001640 <HAL_GPIO_Init+0x2ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d04c      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 80013f4:	4a92      	ldr	r2, [pc, #584]	; (8001640 <HAL_GPIO_Init+0x2ac>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d863      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 80013fa:	4a92      	ldr	r2, [pc, #584]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d046      	beq.n	800148e <HAL_GPIO_Init+0xfa>
 8001400:	4a90      	ldr	r2, [pc, #576]	; (8001644 <HAL_GPIO_Init+0x2b0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d85d      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 8001406:	2b12      	cmp	r3, #18
 8001408:	d82a      	bhi.n	8001460 <HAL_GPIO_Init+0xcc>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d859      	bhi.n	80014c2 <HAL_GPIO_Init+0x12e>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <HAL_GPIO_Init+0x80>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	0800148f 	.word	0x0800148f
 8001418:	08001469 	.word	0x08001469
 800141c:	0800147b 	.word	0x0800147b
 8001420:	080014bd 	.word	0x080014bd
 8001424:	080014c3 	.word	0x080014c3
 8001428:	080014c3 	.word	0x080014c3
 800142c:	080014c3 	.word	0x080014c3
 8001430:	080014c3 	.word	0x080014c3
 8001434:	080014c3 	.word	0x080014c3
 8001438:	080014c3 	.word	0x080014c3
 800143c:	080014c3 	.word	0x080014c3
 8001440:	080014c3 	.word	0x080014c3
 8001444:	080014c3 	.word	0x080014c3
 8001448:	080014c3 	.word	0x080014c3
 800144c:	080014c3 	.word	0x080014c3
 8001450:	080014c3 	.word	0x080014c3
 8001454:	080014c3 	.word	0x080014c3
 8001458:	08001471 	.word	0x08001471
 800145c:	08001485 	.word	0x08001485
 8001460:	4a79      	ldr	r2, [pc, #484]	; (8001648 <HAL_GPIO_Init+0x2b4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001466:	e02c      	b.n	80014c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e029      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	3304      	adds	r3, #4
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e024      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	3308      	adds	r3, #8
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e01f      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	330c      	adds	r3, #12
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e01a      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001496:	2304      	movs	r3, #4
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e013      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a4:	2308      	movs	r3, #8
 80014a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	611a      	str	r2, [r3, #16]
          break;
 80014ae:	e009      	b.n	80014c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b0:	2308      	movs	r3, #8
 80014b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	615a      	str	r2, [r3, #20]
          break;
 80014ba:	e003      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x130>
          break;
 80014c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2bff      	cmp	r3, #255	; 0xff
 80014c8:	d801      	bhi.n	80014ce <HAL_GPIO_Init+0x13a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	e001      	b.n	80014d2 <HAL_GPIO_Init+0x13e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3304      	adds	r3, #4
 80014d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	d802      	bhi.n	80014e0 <HAL_GPIO_Init+0x14c>
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x152>
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	3b08      	subs	r3, #8
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	210f      	movs	r1, #15
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	6a39      	ldr	r1, [r7, #32]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	431a      	orrs	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80b1 	beq.w	8001676 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_GPIO_Init+0x2b8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x2b8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_GPIO_Init+0x2b8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800152c:	4a48      	ldr	r2, [pc, #288]	; (8001650 <HAL_GPIO_Init+0x2bc>)
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a40      	ldr	r2, [pc, #256]	; (8001654 <HAL_GPIO_Init+0x2c0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1ec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3f      	ldr	r2, [pc, #252]	; (8001658 <HAL_GPIO_Init+0x2c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1e8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HAL_GPIO_Init+0x2c8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1e4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1e0>
 8001570:	2303      	movs	r3, #3
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001574:	2304      	movs	r3, #4
 8001576:	e004      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001578:	2302      	movs	r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_GPIO_Init+0x1ee>
 8001580:	2300      	movs	r3, #0
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	f002 0203 	and.w	r2, r2, #3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4093      	lsls	r3, r2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001592:	492f      	ldr	r1, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x2bc>)
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	492c      	ldr	r1, [pc, #176]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4928      	ldr	r1, [pc, #160]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4922      	ldr	r1, [pc, #136]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	491e      	ldr	r1, [pc, #120]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4918      	ldr	r1, [pc, #96]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4914      	ldr	r1, [pc, #80]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d021      	beq.n	8001668 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	490e      	ldr	r1, [pc, #56]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
 8001630:	e021      	b.n	8001676 <HAL_GPIO_Init+0x2e2>
 8001632:	bf00      	nop
 8001634:	10320000 	.word	0x10320000
 8001638:	10310000 	.word	0x10310000
 800163c:	10220000 	.word	0x10220000
 8001640:	10210000 	.word	0x10210000
 8001644:	10120000 	.word	0x10120000
 8001648:	10110000 	.word	0x10110000
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00
 800165c:	40011000 	.word	0x40011000
 8001660:	40011400 	.word	0x40011400
 8001664:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_GPIO_Init+0x304>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	43db      	mvns	r3, r3
 8001670:	4909      	ldr	r1, [pc, #36]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001672:	4013      	ands	r3, r2
 8001674:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae8e 	bne.w	80013a8 <HAL_GPIO_Init+0x14>
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	372c      	adds	r7, #44	; 0x2c
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	807b      	strh	r3, [r7, #2]
 80016d6:	4613      	mov	r3, r2
 80016d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016da:	787b      	ldrb	r3, [r7, #1]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e6:	e003      	b.n	80016f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	611a      	str	r2, [r3, #16]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e26c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x12c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e246      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x76>
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xbc>
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a67      	ldr	r2, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fcc4 	bl	8001164 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fcc0 	bl	8001164 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1fa      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe4>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fcb0 	bl	8001164 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fcac 	bl	8001164 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1e6      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x10c>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1ba      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4939      	ldr	r1, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fc65 	bl	8001164 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fc61 	bl	8001164 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e19b      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc44 	bl	8001164 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc40 	bl	8001164 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e17a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03a      	beq.n	8001980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fc24 	bl	8001164 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff fc20 	bl	8001164 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e15a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 fad8 	bl	8001ef4 <RCC_Delay>
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fc0a 	bl	8001164 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e00f      	b.n	8001974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fc06 	bl	8001164 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d908      	bls.n	8001974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e140      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	42420000 	.word	0x42420000
 8001970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e9      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a6 	beq.w	8001ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b97      	ldr	r3, [pc, #604]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b94      	ldr	r3, [pc, #592]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a8a      	ldr	r2, [pc, #552]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fbc7 	bl	8001164 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fbc3 	bl	8001164 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0fd      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x356>
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fb77 	bl	8001164 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fb73 	bl	8001164 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0ab      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x37e>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb61 	bl	8001164 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff fb5d 	bl	8001164 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e095      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a47      	ldr	r2, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8081 	beq.w	8001be6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d146      	bne.n	8001b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb31 	bl	8001164 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fb2d 	bl	8001164 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e067      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	492d      	ldr	r1, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a19      	ldr	r1, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	430b      	orrs	r3, r1
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb01 	bl	8001164 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff fafd 	bl	8001164 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e037      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
 8001b84:	e02f      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff faea 	bl	8001164 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff fae6 	bl	8001164 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e020      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x498>
 8001bb2:	e018      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e013      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42420060 	.word	0x42420060

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fa3a 	bl	8001164 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff fa36 	bl	8001164 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f998 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003a68 	.word	0x08003a68
 8001dc8:	20000074 	.word	0x20000074
 8001dcc:	20000078 	.word	0x20000078

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b490      	push	{r4, r7}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dd8:	1d3c      	adds	r4, r7, #4
 8001dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de0:	f240 2301 	movw	r3, #513	; 0x201
 8001de4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
 8001e0e:	e02d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e22:	4413      	add	r3, r2
 8001e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c5b      	lsrs	r3, r3, #17
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	fb02 f203 	mul.w	r2, r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e004      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	623b      	str	r3, [r7, #32]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc90      	pop	{r4, r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	08003a58 	.word	0x08003a58
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	003d0900 	.word	0x003d0900

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000074 	.word	0x20000074

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff2 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08003a78 	.word	0x08003a78

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003a78 	.word	0x08003a78

08001ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <RCC_Delay+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <RCC_Delay+0x38>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f10:	bf00      	nop
  }
  while (Delay --);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f9      	bne.n	8001f10 <RCC_Delay+0x1c>
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	20000074 	.word	0x20000074
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e041      	b.n	8001fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe ff64 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f000 fc28 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e03a      	b.n	800205e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_TIM_Base_Start_IT+0x98>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d009      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_Base_Start_IT+0x9c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x58>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_TIM_Base_Start_IT+0xa0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d010      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	e007      	b.n	800205c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f839 	bl	8002112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fb86 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_TIM_PWM_Start+0x24>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e022      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d109      	bne.n	8002162 <HAL_TIM_PWM_Start+0x3e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e015      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d109      	bne.n	800217c <HAL_TIM_PWM_Start+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e008      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e05e      	b.n	8002254 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x82>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a4:	e013      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d104      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x92>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b4:	e00b      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d104      	bne.n	80021c6 <HAL_TIM_PWM_Start+0xa2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c4:	e003      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd74 	bl	8002cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_TIM_PWM_Start+0x138>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d107      	bne.n	80021f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_TIM_PWM_Start+0x138>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_TIM_PWM_Start+0xfa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d009      	beq.n	800221e <HAL_TIM_PWM_Start+0xfa>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_TIM_PWM_Start+0x13c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIM_PWM_Start+0xfa>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_TIM_PWM_Start+0x140>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d111      	bne.n	8002242 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d010      	beq.n	8002252 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002240:	e007      	b.n	8002252 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b02      	cmp	r3, #2
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0202 	mvn.w	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa6f 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa62 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fa71 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0204 	mvn.w	r2, #4
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa45 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa38 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fa47 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0208 	mvn.w	r2, #8
 800233c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa1b 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa0e 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fa1d 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0210 	mvn.w	r2, #16
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2208      	movs	r2, #8
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f9f1 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9e4 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f9f3 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0201 	mvn.w	r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fbfe 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d10e      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d107      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fce1 	bl	8002dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d10e      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d107      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9b7 	bl	80027b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b20      	cmp	r3, #32
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0220 	mvn.w	r2, #32
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fcac 	bl	8002dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800248e:	2302      	movs	r3, #2
 8002490:	e0ac      	b.n	80025ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	f200 809f 	bhi.w	80025e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	080025e1 	.word	0x080025e1
 80024b0:	080025e1 	.word	0x080025e1
 80024b4:	080025e1 	.word	0x080025e1
 80024b8:	0800251d 	.word	0x0800251d
 80024bc:	080025e1 	.word	0x080025e1
 80024c0:	080025e1 	.word	0x080025e1
 80024c4:	080025e1 	.word	0x080025e1
 80024c8:	0800255f 	.word	0x0800255f
 80024cc:	080025e1 	.word	0x080025e1
 80024d0:	080025e1 	.word	0x080025e1
 80024d4:	080025e1 	.word	0x080025e1
 80024d8:	0800259f 	.word	0x0800259f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f9d0 	bl	8002888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0204 	bic.w	r2, r2, #4
 8002506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6999      	ldr	r1, [r3, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	619a      	str	r2, [r3, #24]
      break;
 800251a:	e062      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fa16 	bl	8002954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6999      	ldr	r1, [r3, #24]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	021a      	lsls	r2, r3, #8
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	619a      	str	r2, [r3, #24]
      break;
 800255c:	e041      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fa5f 	bl	8002a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0208 	orr.w	r2, r2, #8
 8002578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0204 	bic.w	r2, r2, #4
 8002588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
      break;
 800259c:	e021      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 faa9 	bl	8002afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69d9      	ldr	r1, [r3, #28]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	021a      	lsls	r2, r3, #8
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	61da      	str	r2, [r3, #28]
      break;
 80025de:	e000      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80025e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x18>
 8002608:	2302      	movs	r3, #2
 800260a:	e0b3      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x180>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800262a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002644:	d03e      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0xd0>
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	f200 8087 	bhi.w	800275c <HAL_TIM_ConfigClockSource+0x168>
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	f000 8085 	beq.w	8002760 <HAL_TIM_ConfigClockSource+0x16c>
 8002656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265a:	d87f      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 800265c:	2b70      	cmp	r3, #112	; 0x70
 800265e:	d01a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0xa2>
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d87b      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b60      	cmp	r3, #96	; 0x60
 8002666:	d050      	beq.n	800270a <HAL_TIM_ConfigClockSource+0x116>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d877      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b50      	cmp	r3, #80	; 0x50
 800266e:	d03c      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0xf6>
 8002670:	2b50      	cmp	r3, #80	; 0x50
 8002672:	d873      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d058      	beq.n	800272a <HAL_TIM_ConfigClockSource+0x136>
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d86f      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b30      	cmp	r3, #48	; 0x30
 800267e:	d064      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x156>
 8002680:	2b30      	cmp	r3, #48	; 0x30
 8002682:	d86b      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b20      	cmp	r3, #32
 8002686:	d060      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x156>
 8002688:	2b20      	cmp	r3, #32
 800268a:	d867      	bhi.n	800275c <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05c      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x156>
 8002690:	2b10      	cmp	r3, #16
 8002692:	d05a      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002694:	e062      	b.n	800275c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f000 faee 	bl	8002c86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	609a      	str	r2, [r3, #8]
      break;
 80026c2:	e04e      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f000 fad7 	bl	8002c86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e6:	609a      	str	r2, [r3, #8]
      break;
 80026e8:	e03b      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f000 fa4e 	bl	8002b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2150      	movs	r1, #80	; 0x50
 8002702:	4618      	mov	r0, r3
 8002704:	f000 faa5 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002708:	e02b      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	461a      	mov	r2, r3
 8002718:	f000 fa6c 	bl	8002bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2160      	movs	r1, #96	; 0x60
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa95 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002728:	e01b      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	461a      	mov	r2, r3
 8002738:	f000 fa2e 	bl	8002b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fa85 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002748:	e00b      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f000 fa7c 	bl	8002c52 <TIM_ITRx_SetConfig>
        break;
 800275a:	e002      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002760:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a29      	ldr	r2, [pc, #164]	; (800287c <TIM_Base_SetConfig+0xb8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00b      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e2:	d007      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a26      	ldr	r2, [pc, #152]	; (8002880 <TIM_Base_SetConfig+0xbc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <TIM_Base_SetConfig+0xc0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d108      	bne.n	8002806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <TIM_Base_SetConfig+0xb8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <TIM_Base_SetConfig+0xbc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <TIM_Base_SetConfig+0xc0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <TIM_Base_SetConfig+0xb8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	615a      	str	r2, [r3, #20]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800

08002888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f023 0201 	bic.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f023 0302 	bic.w	r3, r3, #2
 80028d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <TIM_OC1_SetConfig+0xc8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10c      	bne.n	80028fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0308 	bic.w	r3, r3, #8
 80028ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <TIM_OC1_SetConfig+0xc8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d111      	bne.n	800292a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00

08002954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0210 	bic.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0320 	bic.w	r3, r3, #32
 800299e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <TIM_OC2_SetConfig+0xd0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10d      	bne.n	80029d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <TIM_OC2_SetConfig+0xd0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d113      	bne.n	8002a00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	621a      	str	r2, [r3, #32]
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40012c00 	.word	0x40012c00

08002a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <TIM_OC3_SetConfig+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10d      	bne.n	8002aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <TIM_OC3_SetConfig+0xd0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d113      	bne.n	8002ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	621a      	str	r2, [r3, #32]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00

08002afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	031b      	lsls	r3, r3, #12
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <TIM_OC4_SetConfig+0x98>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d109      	bne.n	8002b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00

08002b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 030a 	bic.w	r3, r3, #10
 8002bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0210 	bic.w	r2, r3, #16
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	621a      	str	r2, [r3, #32]
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f043 0307 	orr.w	r3, r3, #7
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	609a      	str	r2, [r3, #8]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e046      	b.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d009      	beq.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10c      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800

08002dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e03f      	b.n	8002e7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f870 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f905 	bl	8003040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d17c      	bne.n	8002fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_UART_Transmit+0x2c>
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e075      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit+0x3e>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e06e      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2221      	movs	r2, #33	; 0x21
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fe f943 	bl	8001164 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Transmit+0x82>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f18:	e02a      	b.n	8002f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f840 	bl	8002faa <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e036      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e007      	b.n	8002f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1cf      	bne.n	8002f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f810 	bl	8002faa <UART_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e006      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fba:	e02c      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d028      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x30>
 8002fca:	f7fe f8cb 	bl	8001164 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d21d      	bcs.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fe8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	429a      	cmp	r2, r3
 8003032:	d0c3      	beq.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800307a:	f023 030c 	bic.w	r3, r3, #12
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <UART_SetConfig+0x114>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7fe ff10 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	e002      	b.n	80030b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7fe fef8 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 80030b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <UART_SetConfig+0x118>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	0119      	lsls	r1, r3, #4
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <UART_SetConfig+0x118>)
 80030ee:	fba3 0302 	umull	r0, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2064      	movs	r0, #100	; 0x64
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <UART_SetConfig+0x118>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310c:	4419      	add	r1, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <UART_SetConfig+0x118>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	; 0x32
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <UART_SetConfig+0x118>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	440a      	add	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40013800 	.word	0x40013800
 8003158:	51eb851f 	.word	0x51eb851f

0800315c <__errno>:
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <__errno+0x8>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000080 	.word	0x20000080

08003168 <__libc_init_array>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	2600      	movs	r6, #0
 800316c:	4d0c      	ldr	r5, [pc, #48]	; (80031a0 <__libc_init_array+0x38>)
 800316e:	4c0d      	ldr	r4, [pc, #52]	; (80031a4 <__libc_init_array+0x3c>)
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	42a6      	cmp	r6, r4
 8003176:	d109      	bne.n	800318c <__libc_init_array+0x24>
 8003178:	f000 fc5c 	bl	8003a34 <_init>
 800317c:	2600      	movs	r6, #0
 800317e:	4d0a      	ldr	r5, [pc, #40]	; (80031a8 <__libc_init_array+0x40>)
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <__libc_init_array+0x44>)
 8003182:	1b64      	subs	r4, r4, r5
 8003184:	10a4      	asrs	r4, r4, #2
 8003186:	42a6      	cmp	r6, r4
 8003188:	d105      	bne.n	8003196 <__libc_init_array+0x2e>
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003190:	4798      	blx	r3
 8003192:	3601      	adds	r6, #1
 8003194:	e7ee      	b.n	8003174 <__libc_init_array+0xc>
 8003196:	f855 3b04 	ldr.w	r3, [r5], #4
 800319a:	4798      	blx	r3
 800319c:	3601      	adds	r6, #1
 800319e:	e7f2      	b.n	8003186 <__libc_init_array+0x1e>
 80031a0:	08003ab4 	.word	0x08003ab4
 80031a4:	08003ab4 	.word	0x08003ab4
 80031a8:	08003ab4 	.word	0x08003ab4
 80031ac:	08003ab8 	.word	0x08003ab8

080031b0 <memset>:
 80031b0:	4603      	mov	r3, r0
 80031b2:	4402      	add	r2, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <siprintf>:
 80031c0:	b40e      	push	{r1, r2, r3}
 80031c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031c6:	b500      	push	{lr}
 80031c8:	b09c      	sub	sp, #112	; 0x70
 80031ca:	ab1d      	add	r3, sp, #116	; 0x74
 80031cc:	9002      	str	r0, [sp, #8]
 80031ce:	9006      	str	r0, [sp, #24]
 80031d0:	9107      	str	r1, [sp, #28]
 80031d2:	9104      	str	r1, [sp, #16]
 80031d4:	4808      	ldr	r0, [pc, #32]	; (80031f8 <siprintf+0x38>)
 80031d6:	4909      	ldr	r1, [pc, #36]	; (80031fc <siprintf+0x3c>)
 80031d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031dc:	9105      	str	r1, [sp, #20]
 80031de:	6800      	ldr	r0, [r0, #0]
 80031e0:	a902      	add	r1, sp, #8
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	f000 f868 	bl	80032b8 <_svfiprintf_r>
 80031e8:	2200      	movs	r2, #0
 80031ea:	9b02      	ldr	r3, [sp, #8]
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	b01c      	add	sp, #112	; 0x70
 80031f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031f4:	b003      	add	sp, #12
 80031f6:	4770      	bx	lr
 80031f8:	20000080 	.word	0x20000080
 80031fc:	ffff0208 	.word	0xffff0208

08003200 <__ssputs_r>:
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	688e      	ldr	r6, [r1, #8]
 8003206:	4682      	mov	sl, r0
 8003208:	429e      	cmp	r6, r3
 800320a:	460c      	mov	r4, r1
 800320c:	4690      	mov	r8, r2
 800320e:	461f      	mov	r7, r3
 8003210:	d838      	bhi.n	8003284 <__ssputs_r+0x84>
 8003212:	898a      	ldrh	r2, [r1, #12]
 8003214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003218:	d032      	beq.n	8003280 <__ssputs_r+0x80>
 800321a:	6825      	ldr	r5, [r4, #0]
 800321c:	6909      	ldr	r1, [r1, #16]
 800321e:	3301      	adds	r3, #1
 8003220:	eba5 0901 	sub.w	r9, r5, r1
 8003224:	6965      	ldr	r5, [r4, #20]
 8003226:	444b      	add	r3, r9
 8003228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800322c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003230:	106d      	asrs	r5, r5, #1
 8003232:	429d      	cmp	r5, r3
 8003234:	bf38      	it	cc
 8003236:	461d      	movcc	r5, r3
 8003238:	0553      	lsls	r3, r2, #21
 800323a:	d531      	bpl.n	80032a0 <__ssputs_r+0xa0>
 800323c:	4629      	mov	r1, r5
 800323e:	f000 fb53 	bl	80038e8 <_malloc_r>
 8003242:	4606      	mov	r6, r0
 8003244:	b950      	cbnz	r0, 800325c <__ssputs_r+0x5c>
 8003246:	230c      	movs	r3, #12
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f8ca 3000 	str.w	r3, [sl]
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003256:	81a3      	strh	r3, [r4, #12]
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	464a      	mov	r2, r9
 800325e:	6921      	ldr	r1, [r4, #16]
 8003260:	f000 face 	bl	8003800 <memcpy>
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	81a3      	strh	r3, [r4, #12]
 8003270:	6126      	str	r6, [r4, #16]
 8003272:	444e      	add	r6, r9
 8003274:	6026      	str	r6, [r4, #0]
 8003276:	463e      	mov	r6, r7
 8003278:	6165      	str	r5, [r4, #20]
 800327a:	eba5 0509 	sub.w	r5, r5, r9
 800327e:	60a5      	str	r5, [r4, #8]
 8003280:	42be      	cmp	r6, r7
 8003282:	d900      	bls.n	8003286 <__ssputs_r+0x86>
 8003284:	463e      	mov	r6, r7
 8003286:	4632      	mov	r2, r6
 8003288:	4641      	mov	r1, r8
 800328a:	6820      	ldr	r0, [r4, #0]
 800328c:	f000 fac6 	bl	800381c <memmove>
 8003290:	68a3      	ldr	r3, [r4, #8]
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	1b9b      	subs	r3, r3, r6
 8003296:	4432      	add	r2, r6
 8003298:	2000      	movs	r0, #0
 800329a:	60a3      	str	r3, [r4, #8]
 800329c:	6022      	str	r2, [r4, #0]
 800329e:	e7db      	b.n	8003258 <__ssputs_r+0x58>
 80032a0:	462a      	mov	r2, r5
 80032a2:	f000 fb7b 	bl	800399c <_realloc_r>
 80032a6:	4606      	mov	r6, r0
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d1e1      	bne.n	8003270 <__ssputs_r+0x70>
 80032ac:	4650      	mov	r0, sl
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	f000 face 	bl	8003850 <_free_r>
 80032b4:	e7c7      	b.n	8003246 <__ssputs_r+0x46>
	...

080032b8 <_svfiprintf_r>:
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	4698      	mov	r8, r3
 80032be:	898b      	ldrh	r3, [r1, #12]
 80032c0:	4607      	mov	r7, r0
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	460d      	mov	r5, r1
 80032c6:	4614      	mov	r4, r2
 80032c8:	b09d      	sub	sp, #116	; 0x74
 80032ca:	d50e      	bpl.n	80032ea <_svfiprintf_r+0x32>
 80032cc:	690b      	ldr	r3, [r1, #16]
 80032ce:	b963      	cbnz	r3, 80032ea <_svfiprintf_r+0x32>
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	f000 fb09 	bl	80038e8 <_malloc_r>
 80032d6:	6028      	str	r0, [r5, #0]
 80032d8:	6128      	str	r0, [r5, #16]
 80032da:	b920      	cbnz	r0, 80032e6 <_svfiprintf_r+0x2e>
 80032dc:	230c      	movs	r3, #12
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e0d1      	b.n	800348a <_svfiprintf_r+0x1d2>
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	616b      	str	r3, [r5, #20]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9309      	str	r3, [sp, #36]	; 0x24
 80032ee:	2320      	movs	r3, #32
 80032f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032f4:	2330      	movs	r3, #48	; 0x30
 80032f6:	f04f 0901 	mov.w	r9, #1
 80032fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80032fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80034a4 <_svfiprintf_r+0x1ec>
 8003302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003306:	4623      	mov	r3, r4
 8003308:	469a      	mov	sl, r3
 800330a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800330e:	b10a      	cbz	r2, 8003314 <_svfiprintf_r+0x5c>
 8003310:	2a25      	cmp	r2, #37	; 0x25
 8003312:	d1f9      	bne.n	8003308 <_svfiprintf_r+0x50>
 8003314:	ebba 0b04 	subs.w	fp, sl, r4
 8003318:	d00b      	beq.n	8003332 <_svfiprintf_r+0x7a>
 800331a:	465b      	mov	r3, fp
 800331c:	4622      	mov	r2, r4
 800331e:	4629      	mov	r1, r5
 8003320:	4638      	mov	r0, r7
 8003322:	f7ff ff6d 	bl	8003200 <__ssputs_r>
 8003326:	3001      	adds	r0, #1
 8003328:	f000 80aa 	beq.w	8003480 <_svfiprintf_r+0x1c8>
 800332c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800332e:	445a      	add	r2, fp
 8003330:	9209      	str	r2, [sp, #36]	; 0x24
 8003332:	f89a 3000 	ldrb.w	r3, [sl]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80a2 	beq.w	8003480 <_svfiprintf_r+0x1c8>
 800333c:	2300      	movs	r3, #0
 800333e:	f04f 32ff 	mov.w	r2, #4294967295
 8003342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003346:	f10a 0a01 	add.w	sl, sl, #1
 800334a:	9304      	str	r3, [sp, #16]
 800334c:	9307      	str	r3, [sp, #28]
 800334e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003352:	931a      	str	r3, [sp, #104]	; 0x68
 8003354:	4654      	mov	r4, sl
 8003356:	2205      	movs	r2, #5
 8003358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800335c:	4851      	ldr	r0, [pc, #324]	; (80034a4 <_svfiprintf_r+0x1ec>)
 800335e:	f000 fa41 	bl	80037e4 <memchr>
 8003362:	9a04      	ldr	r2, [sp, #16]
 8003364:	b9d8      	cbnz	r0, 800339e <_svfiprintf_r+0xe6>
 8003366:	06d0      	lsls	r0, r2, #27
 8003368:	bf44      	itt	mi
 800336a:	2320      	movmi	r3, #32
 800336c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003370:	0711      	lsls	r1, r2, #28
 8003372:	bf44      	itt	mi
 8003374:	232b      	movmi	r3, #43	; 0x2b
 8003376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800337a:	f89a 3000 	ldrb.w	r3, [sl]
 800337e:	2b2a      	cmp	r3, #42	; 0x2a
 8003380:	d015      	beq.n	80033ae <_svfiprintf_r+0xf6>
 8003382:	4654      	mov	r4, sl
 8003384:	2000      	movs	r0, #0
 8003386:	f04f 0c0a 	mov.w	ip, #10
 800338a:	9a07      	ldr	r2, [sp, #28]
 800338c:	4621      	mov	r1, r4
 800338e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003392:	3b30      	subs	r3, #48	; 0x30
 8003394:	2b09      	cmp	r3, #9
 8003396:	d94e      	bls.n	8003436 <_svfiprintf_r+0x17e>
 8003398:	b1b0      	cbz	r0, 80033c8 <_svfiprintf_r+0x110>
 800339a:	9207      	str	r2, [sp, #28]
 800339c:	e014      	b.n	80033c8 <_svfiprintf_r+0x110>
 800339e:	eba0 0308 	sub.w	r3, r0, r8
 80033a2:	fa09 f303 	lsl.w	r3, r9, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	46a2      	mov	sl, r4
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	e7d2      	b.n	8003354 <_svfiprintf_r+0x9c>
 80033ae:	9b03      	ldr	r3, [sp, #12]
 80033b0:	1d19      	adds	r1, r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	9103      	str	r1, [sp, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bfbb      	ittet	lt
 80033ba:	425b      	neglt	r3, r3
 80033bc:	f042 0202 	orrlt.w	r2, r2, #2
 80033c0:	9307      	strge	r3, [sp, #28]
 80033c2:	9307      	strlt	r3, [sp, #28]
 80033c4:	bfb8      	it	lt
 80033c6:	9204      	strlt	r2, [sp, #16]
 80033c8:	7823      	ldrb	r3, [r4, #0]
 80033ca:	2b2e      	cmp	r3, #46	; 0x2e
 80033cc:	d10c      	bne.n	80033e8 <_svfiprintf_r+0x130>
 80033ce:	7863      	ldrb	r3, [r4, #1]
 80033d0:	2b2a      	cmp	r3, #42	; 0x2a
 80033d2:	d135      	bne.n	8003440 <_svfiprintf_r+0x188>
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	3402      	adds	r4, #2
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	9203      	str	r2, [sp, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bfb8      	it	lt
 80033e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80033e6:	9305      	str	r3, [sp, #20]
 80033e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80034b4 <_svfiprintf_r+0x1fc>
 80033ec:	2203      	movs	r2, #3
 80033ee:	4650      	mov	r0, sl
 80033f0:	7821      	ldrb	r1, [r4, #0]
 80033f2:	f000 f9f7 	bl	80037e4 <memchr>
 80033f6:	b140      	cbz	r0, 800340a <_svfiprintf_r+0x152>
 80033f8:	2340      	movs	r3, #64	; 0x40
 80033fa:	eba0 000a 	sub.w	r0, r0, sl
 80033fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003402:	9b04      	ldr	r3, [sp, #16]
 8003404:	3401      	adds	r4, #1
 8003406:	4303      	orrs	r3, r0
 8003408:	9304      	str	r3, [sp, #16]
 800340a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340e:	2206      	movs	r2, #6
 8003410:	4825      	ldr	r0, [pc, #148]	; (80034a8 <_svfiprintf_r+0x1f0>)
 8003412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003416:	f000 f9e5 	bl	80037e4 <memchr>
 800341a:	2800      	cmp	r0, #0
 800341c:	d038      	beq.n	8003490 <_svfiprintf_r+0x1d8>
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <_svfiprintf_r+0x1f4>)
 8003420:	bb1b      	cbnz	r3, 800346a <_svfiprintf_r+0x1b2>
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	3307      	adds	r3, #7
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	3308      	adds	r3, #8
 800342c:	9303      	str	r3, [sp, #12]
 800342e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003430:	4433      	add	r3, r6
 8003432:	9309      	str	r3, [sp, #36]	; 0x24
 8003434:	e767      	b.n	8003306 <_svfiprintf_r+0x4e>
 8003436:	460c      	mov	r4, r1
 8003438:	2001      	movs	r0, #1
 800343a:	fb0c 3202 	mla	r2, ip, r2, r3
 800343e:	e7a5      	b.n	800338c <_svfiprintf_r+0xd4>
 8003440:	2300      	movs	r3, #0
 8003442:	f04f 0c0a 	mov.w	ip, #10
 8003446:	4619      	mov	r1, r3
 8003448:	3401      	adds	r4, #1
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	4620      	mov	r0, r4
 800344e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003452:	3a30      	subs	r2, #48	; 0x30
 8003454:	2a09      	cmp	r2, #9
 8003456:	d903      	bls.n	8003460 <_svfiprintf_r+0x1a8>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0c5      	beq.n	80033e8 <_svfiprintf_r+0x130>
 800345c:	9105      	str	r1, [sp, #20]
 800345e:	e7c3      	b.n	80033e8 <_svfiprintf_r+0x130>
 8003460:	4604      	mov	r4, r0
 8003462:	2301      	movs	r3, #1
 8003464:	fb0c 2101 	mla	r1, ip, r1, r2
 8003468:	e7f0      	b.n	800344c <_svfiprintf_r+0x194>
 800346a:	ab03      	add	r3, sp, #12
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	462a      	mov	r2, r5
 8003470:	4638      	mov	r0, r7
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <_svfiprintf_r+0x1f8>)
 8003474:	a904      	add	r1, sp, #16
 8003476:	f3af 8000 	nop.w
 800347a:	1c42      	adds	r2, r0, #1
 800347c:	4606      	mov	r6, r0
 800347e:	d1d6      	bne.n	800342e <_svfiprintf_r+0x176>
 8003480:	89ab      	ldrh	r3, [r5, #12]
 8003482:	065b      	lsls	r3, r3, #25
 8003484:	f53f af2c 	bmi.w	80032e0 <_svfiprintf_r+0x28>
 8003488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800348a:	b01d      	add	sp, #116	; 0x74
 800348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003490:	ab03      	add	r3, sp, #12
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	462a      	mov	r2, r5
 8003496:	4638      	mov	r0, r7
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <_svfiprintf_r+0x1f8>)
 800349a:	a904      	add	r1, sp, #16
 800349c:	f000 f87c 	bl	8003598 <_printf_i>
 80034a0:	e7eb      	b.n	800347a <_svfiprintf_r+0x1c2>
 80034a2:	bf00      	nop
 80034a4:	08003a80 	.word	0x08003a80
 80034a8:	08003a8a 	.word	0x08003a8a
 80034ac:	00000000 	.word	0x00000000
 80034b0:	08003201 	.word	0x08003201
 80034b4:	08003a86 	.word	0x08003a86

080034b8 <_printf_common>:
 80034b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	4616      	mov	r6, r2
 80034be:	4699      	mov	r9, r3
 80034c0:	688a      	ldr	r2, [r1, #8]
 80034c2:	690b      	ldr	r3, [r1, #16]
 80034c4:	4607      	mov	r7, r0
 80034c6:	4293      	cmp	r3, r2
 80034c8:	bfb8      	it	lt
 80034ca:	4613      	movlt	r3, r2
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d2:	460c      	mov	r4, r1
 80034d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034d8:	b10a      	cbz	r2, 80034de <_printf_common+0x26>
 80034da:	3301      	adds	r3, #1
 80034dc:	6033      	str	r3, [r6, #0]
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	0699      	lsls	r1, r3, #26
 80034e2:	bf42      	ittt	mi
 80034e4:	6833      	ldrmi	r3, [r6, #0]
 80034e6:	3302      	addmi	r3, #2
 80034e8:	6033      	strmi	r3, [r6, #0]
 80034ea:	6825      	ldr	r5, [r4, #0]
 80034ec:	f015 0506 	ands.w	r5, r5, #6
 80034f0:	d106      	bne.n	8003500 <_printf_common+0x48>
 80034f2:	f104 0a19 	add.w	sl, r4, #25
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	6832      	ldr	r2, [r6, #0]
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	42ab      	cmp	r3, r5
 80034fe:	dc28      	bgt.n	8003552 <_printf_common+0x9a>
 8003500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003504:	1e13      	subs	r3, r2, #0
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	bf18      	it	ne
 800350a:	2301      	movne	r3, #1
 800350c:	0692      	lsls	r2, r2, #26
 800350e:	d42d      	bmi.n	800356c <_printf_common+0xb4>
 8003510:	4649      	mov	r1, r9
 8003512:	4638      	mov	r0, r7
 8003514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d020      	beq.n	8003560 <_printf_common+0xa8>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	68e5      	ldr	r5, [r4, #12]
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf18      	it	ne
 800352a:	2500      	movne	r5, #0
 800352c:	6832      	ldr	r2, [r6, #0]
 800352e:	f04f 0600 	mov.w	r6, #0
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	bf08      	it	eq
 8003536:	1aad      	subeq	r5, r5, r2
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	bf08      	it	eq
 800353c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003540:	4293      	cmp	r3, r2
 8003542:	bfc4      	itt	gt
 8003544:	1a9b      	subgt	r3, r3, r2
 8003546:	18ed      	addgt	r5, r5, r3
 8003548:	341a      	adds	r4, #26
 800354a:	42b5      	cmp	r5, r6
 800354c:	d11a      	bne.n	8003584 <_printf_common+0xcc>
 800354e:	2000      	movs	r0, #0
 8003550:	e008      	b.n	8003564 <_printf_common+0xac>
 8003552:	2301      	movs	r3, #1
 8003554:	4652      	mov	r2, sl
 8003556:	4649      	mov	r1, r9
 8003558:	4638      	mov	r0, r7
 800355a:	47c0      	blx	r8
 800355c:	3001      	adds	r0, #1
 800355e:	d103      	bne.n	8003568 <_printf_common+0xb0>
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003568:	3501      	adds	r5, #1
 800356a:	e7c4      	b.n	80034f6 <_printf_common+0x3e>
 800356c:	2030      	movs	r0, #48	; 0x30
 800356e:	18e1      	adds	r1, r4, r3
 8003570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800357a:	4422      	add	r2, r4
 800357c:	3302      	adds	r3, #2
 800357e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003582:	e7c5      	b.n	8003510 <_printf_common+0x58>
 8003584:	2301      	movs	r3, #1
 8003586:	4622      	mov	r2, r4
 8003588:	4649      	mov	r1, r9
 800358a:	4638      	mov	r0, r7
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d0e6      	beq.n	8003560 <_printf_common+0xa8>
 8003592:	3601      	adds	r6, #1
 8003594:	e7d9      	b.n	800354a <_printf_common+0x92>
	...

08003598 <_printf_i>:
 8003598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800359c:	460c      	mov	r4, r1
 800359e:	7e27      	ldrb	r7, [r4, #24]
 80035a0:	4691      	mov	r9, r2
 80035a2:	2f78      	cmp	r7, #120	; 0x78
 80035a4:	4680      	mov	r8, r0
 80035a6:	469a      	mov	sl, r3
 80035a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ae:	d807      	bhi.n	80035c0 <_printf_i+0x28>
 80035b0:	2f62      	cmp	r7, #98	; 0x62
 80035b2:	d80a      	bhi.n	80035ca <_printf_i+0x32>
 80035b4:	2f00      	cmp	r7, #0
 80035b6:	f000 80d9 	beq.w	800376c <_printf_i+0x1d4>
 80035ba:	2f58      	cmp	r7, #88	; 0x58
 80035bc:	f000 80a4 	beq.w	8003708 <_printf_i+0x170>
 80035c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035c8:	e03a      	b.n	8003640 <_printf_i+0xa8>
 80035ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035ce:	2b15      	cmp	r3, #21
 80035d0:	d8f6      	bhi.n	80035c0 <_printf_i+0x28>
 80035d2:	a001      	add	r0, pc, #4	; (adr r0, 80035d8 <_printf_i+0x40>)
 80035d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035d8:	08003631 	.word	0x08003631
 80035dc:	08003645 	.word	0x08003645
 80035e0:	080035c1 	.word	0x080035c1
 80035e4:	080035c1 	.word	0x080035c1
 80035e8:	080035c1 	.word	0x080035c1
 80035ec:	080035c1 	.word	0x080035c1
 80035f0:	08003645 	.word	0x08003645
 80035f4:	080035c1 	.word	0x080035c1
 80035f8:	080035c1 	.word	0x080035c1
 80035fc:	080035c1 	.word	0x080035c1
 8003600:	080035c1 	.word	0x080035c1
 8003604:	08003753 	.word	0x08003753
 8003608:	08003675 	.word	0x08003675
 800360c:	08003735 	.word	0x08003735
 8003610:	080035c1 	.word	0x080035c1
 8003614:	080035c1 	.word	0x080035c1
 8003618:	08003775 	.word	0x08003775
 800361c:	080035c1 	.word	0x080035c1
 8003620:	08003675 	.word	0x08003675
 8003624:	080035c1 	.word	0x080035c1
 8003628:	080035c1 	.word	0x080035c1
 800362c:	0800373d 	.word	0x0800373d
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	600a      	str	r2, [r1, #0]
 800363c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003640:	2301      	movs	r3, #1
 8003642:	e0a4      	b.n	800378e <_printf_i+0x1f6>
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	6808      	ldr	r0, [r1, #0]
 8003648:	062e      	lsls	r6, r5, #24
 800364a:	f100 0304 	add.w	r3, r0, #4
 800364e:	d50a      	bpl.n	8003666 <_printf_i+0xce>
 8003650:	6805      	ldr	r5, [r0, #0]
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	2d00      	cmp	r5, #0
 8003656:	da03      	bge.n	8003660 <_printf_i+0xc8>
 8003658:	232d      	movs	r3, #45	; 0x2d
 800365a:	426d      	negs	r5, r5
 800365c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003660:	230a      	movs	r3, #10
 8003662:	485e      	ldr	r0, [pc, #376]	; (80037dc <_printf_i+0x244>)
 8003664:	e019      	b.n	800369a <_printf_i+0x102>
 8003666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800366a:	6805      	ldr	r5, [r0, #0]
 800366c:	600b      	str	r3, [r1, #0]
 800366e:	bf18      	it	ne
 8003670:	b22d      	sxthne	r5, r5
 8003672:	e7ef      	b.n	8003654 <_printf_i+0xbc>
 8003674:	680b      	ldr	r3, [r1, #0]
 8003676:	6825      	ldr	r5, [r4, #0]
 8003678:	1d18      	adds	r0, r3, #4
 800367a:	6008      	str	r0, [r1, #0]
 800367c:	0628      	lsls	r0, r5, #24
 800367e:	d501      	bpl.n	8003684 <_printf_i+0xec>
 8003680:	681d      	ldr	r5, [r3, #0]
 8003682:	e002      	b.n	800368a <_printf_i+0xf2>
 8003684:	0669      	lsls	r1, r5, #25
 8003686:	d5fb      	bpl.n	8003680 <_printf_i+0xe8>
 8003688:	881d      	ldrh	r5, [r3, #0]
 800368a:	2f6f      	cmp	r7, #111	; 0x6f
 800368c:	bf0c      	ite	eq
 800368e:	2308      	moveq	r3, #8
 8003690:	230a      	movne	r3, #10
 8003692:	4852      	ldr	r0, [pc, #328]	; (80037dc <_printf_i+0x244>)
 8003694:	2100      	movs	r1, #0
 8003696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800369a:	6866      	ldr	r6, [r4, #4]
 800369c:	2e00      	cmp	r6, #0
 800369e:	bfa8      	it	ge
 80036a0:	6821      	ldrge	r1, [r4, #0]
 80036a2:	60a6      	str	r6, [r4, #8]
 80036a4:	bfa4      	itt	ge
 80036a6:	f021 0104 	bicge.w	r1, r1, #4
 80036aa:	6021      	strge	r1, [r4, #0]
 80036ac:	b90d      	cbnz	r5, 80036b2 <_printf_i+0x11a>
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	d04d      	beq.n	800374e <_printf_i+0x1b6>
 80036b2:	4616      	mov	r6, r2
 80036b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036b8:	fb03 5711 	mls	r7, r3, r1, r5
 80036bc:	5dc7      	ldrb	r7, [r0, r7]
 80036be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036c2:	462f      	mov	r7, r5
 80036c4:	42bb      	cmp	r3, r7
 80036c6:	460d      	mov	r5, r1
 80036c8:	d9f4      	bls.n	80036b4 <_printf_i+0x11c>
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d10b      	bne.n	80036e6 <_printf_i+0x14e>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	07df      	lsls	r7, r3, #31
 80036d2:	d508      	bpl.n	80036e6 <_printf_i+0x14e>
 80036d4:	6923      	ldr	r3, [r4, #16]
 80036d6:	6861      	ldr	r1, [r4, #4]
 80036d8:	4299      	cmp	r1, r3
 80036da:	bfde      	ittt	le
 80036dc:	2330      	movle	r3, #48	; 0x30
 80036de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036e6:	1b92      	subs	r2, r2, r6
 80036e8:	6122      	str	r2, [r4, #16]
 80036ea:	464b      	mov	r3, r9
 80036ec:	4621      	mov	r1, r4
 80036ee:	4640      	mov	r0, r8
 80036f0:	f8cd a000 	str.w	sl, [sp]
 80036f4:	aa03      	add	r2, sp, #12
 80036f6:	f7ff fedf 	bl	80034b8 <_printf_common>
 80036fa:	3001      	adds	r0, #1
 80036fc:	d14c      	bne.n	8003798 <_printf_i+0x200>
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003702:	b004      	add	sp, #16
 8003704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003708:	4834      	ldr	r0, [pc, #208]	; (80037dc <_printf_i+0x244>)
 800370a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800370e:	680e      	ldr	r6, [r1, #0]
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	f856 5b04 	ldr.w	r5, [r6], #4
 8003716:	061f      	lsls	r7, r3, #24
 8003718:	600e      	str	r6, [r1, #0]
 800371a:	d514      	bpl.n	8003746 <_printf_i+0x1ae>
 800371c:	07d9      	lsls	r1, r3, #31
 800371e:	bf44      	itt	mi
 8003720:	f043 0320 	orrmi.w	r3, r3, #32
 8003724:	6023      	strmi	r3, [r4, #0]
 8003726:	b91d      	cbnz	r5, 8003730 <_printf_i+0x198>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	f023 0320 	bic.w	r3, r3, #32
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	2310      	movs	r3, #16
 8003732:	e7af      	b.n	8003694 <_printf_i+0xfc>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	2378      	movs	r3, #120	; 0x78
 800373e:	4828      	ldr	r0, [pc, #160]	; (80037e0 <_printf_i+0x248>)
 8003740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003744:	e7e3      	b.n	800370e <_printf_i+0x176>
 8003746:	065e      	lsls	r6, r3, #25
 8003748:	bf48      	it	mi
 800374a:	b2ad      	uxthmi	r5, r5
 800374c:	e7e6      	b.n	800371c <_printf_i+0x184>
 800374e:	4616      	mov	r6, r2
 8003750:	e7bb      	b.n	80036ca <_printf_i+0x132>
 8003752:	680b      	ldr	r3, [r1, #0]
 8003754:	6826      	ldr	r6, [r4, #0]
 8003756:	1d1d      	adds	r5, r3, #4
 8003758:	6960      	ldr	r0, [r4, #20]
 800375a:	600d      	str	r5, [r1, #0]
 800375c:	0635      	lsls	r5, r6, #24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	d501      	bpl.n	8003766 <_printf_i+0x1ce>
 8003762:	6018      	str	r0, [r3, #0]
 8003764:	e002      	b.n	800376c <_printf_i+0x1d4>
 8003766:	0671      	lsls	r1, r6, #25
 8003768:	d5fb      	bpl.n	8003762 <_printf_i+0x1ca>
 800376a:	8018      	strh	r0, [r3, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	4616      	mov	r6, r2
 8003770:	6123      	str	r3, [r4, #16]
 8003772:	e7ba      	b.n	80036ea <_printf_i+0x152>
 8003774:	680b      	ldr	r3, [r1, #0]
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	600a      	str	r2, [r1, #0]
 800377a:	681e      	ldr	r6, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4630      	mov	r0, r6
 8003780:	6862      	ldr	r2, [r4, #4]
 8003782:	f000 f82f 	bl	80037e4 <memchr>
 8003786:	b108      	cbz	r0, 800378c <_printf_i+0x1f4>
 8003788:	1b80      	subs	r0, r0, r6
 800378a:	6060      	str	r0, [r4, #4]
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	2300      	movs	r3, #0
 8003792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003796:	e7a8      	b.n	80036ea <_printf_i+0x152>
 8003798:	4632      	mov	r2, r6
 800379a:	4649      	mov	r1, r9
 800379c:	4640      	mov	r0, r8
 800379e:	6923      	ldr	r3, [r4, #16]
 80037a0:	47d0      	blx	sl
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0ab      	beq.n	80036fe <_printf_i+0x166>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	079b      	lsls	r3, r3, #30
 80037aa:	d413      	bmi.n	80037d4 <_printf_i+0x23c>
 80037ac:	68e0      	ldr	r0, [r4, #12]
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	4298      	cmp	r0, r3
 80037b2:	bfb8      	it	lt
 80037b4:	4618      	movlt	r0, r3
 80037b6:	e7a4      	b.n	8003702 <_printf_i+0x16a>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4632      	mov	r2, r6
 80037bc:	4649      	mov	r1, r9
 80037be:	4640      	mov	r0, r8
 80037c0:	47d0      	blx	sl
 80037c2:	3001      	adds	r0, #1
 80037c4:	d09b      	beq.n	80036fe <_printf_i+0x166>
 80037c6:	3501      	adds	r5, #1
 80037c8:	68e3      	ldr	r3, [r4, #12]
 80037ca:	9903      	ldr	r1, [sp, #12]
 80037cc:	1a5b      	subs	r3, r3, r1
 80037ce:	42ab      	cmp	r3, r5
 80037d0:	dcf2      	bgt.n	80037b8 <_printf_i+0x220>
 80037d2:	e7eb      	b.n	80037ac <_printf_i+0x214>
 80037d4:	2500      	movs	r5, #0
 80037d6:	f104 0619 	add.w	r6, r4, #25
 80037da:	e7f5      	b.n	80037c8 <_printf_i+0x230>
 80037dc:	08003a91 	.word	0x08003a91
 80037e0:	08003aa2 	.word	0x08003aa2

080037e4 <memchr>:
 80037e4:	4603      	mov	r3, r0
 80037e6:	b510      	push	{r4, lr}
 80037e8:	b2c9      	uxtb	r1, r1
 80037ea:	4402      	add	r2, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	d101      	bne.n	80037f6 <memchr+0x12>
 80037f2:	2000      	movs	r0, #0
 80037f4:	e003      	b.n	80037fe <memchr+0x1a>
 80037f6:	7804      	ldrb	r4, [r0, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	428c      	cmp	r4, r1
 80037fc:	d1f6      	bne.n	80037ec <memchr+0x8>
 80037fe:	bd10      	pop	{r4, pc}

08003800 <memcpy>:
 8003800:	440a      	add	r2, r1
 8003802:	4291      	cmp	r1, r2
 8003804:	f100 33ff 	add.w	r3, r0, #4294967295
 8003808:	d100      	bne.n	800380c <memcpy+0xc>
 800380a:	4770      	bx	lr
 800380c:	b510      	push	{r4, lr}
 800380e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003812:	4291      	cmp	r1, r2
 8003814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003818:	d1f9      	bne.n	800380e <memcpy+0xe>
 800381a:	bd10      	pop	{r4, pc}

0800381c <memmove>:
 800381c:	4288      	cmp	r0, r1
 800381e:	b510      	push	{r4, lr}
 8003820:	eb01 0402 	add.w	r4, r1, r2
 8003824:	d902      	bls.n	800382c <memmove+0x10>
 8003826:	4284      	cmp	r4, r0
 8003828:	4623      	mov	r3, r4
 800382a:	d807      	bhi.n	800383c <memmove+0x20>
 800382c:	1e43      	subs	r3, r0, #1
 800382e:	42a1      	cmp	r1, r4
 8003830:	d008      	beq.n	8003844 <memmove+0x28>
 8003832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800383a:	e7f8      	b.n	800382e <memmove+0x12>
 800383c:	4601      	mov	r1, r0
 800383e:	4402      	add	r2, r0
 8003840:	428a      	cmp	r2, r1
 8003842:	d100      	bne.n	8003846 <memmove+0x2a>
 8003844:	bd10      	pop	{r4, pc}
 8003846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800384a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800384e:	e7f7      	b.n	8003840 <memmove+0x24>

08003850 <_free_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d043      	beq.n	80038e0 <_free_r+0x90>
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f0c      	subs	r4, r1, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	18e4      	addlt	r4, r4, r3
 8003864:	f000 f8d0 	bl	8003a08 <__malloc_lock>
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <_free_r+0x94>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	4610      	mov	r0, r2
 800386e:	b933      	cbnz	r3, 800387e <_free_r+0x2e>
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6014      	str	r4, [r2, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800387a:	f000 b8cb 	b.w	8003a14 <__malloc_unlock>
 800387e:	42a3      	cmp	r3, r4
 8003880:	d90a      	bls.n	8003898 <_free_r+0x48>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	1862      	adds	r2, r4, r1
 8003886:	4293      	cmp	r3, r2
 8003888:	bf01      	itttt	eq
 800388a:	681a      	ldreq	r2, [r3, #0]
 800388c:	685b      	ldreq	r3, [r3, #4]
 800388e:	1852      	addeq	r2, r2, r1
 8003890:	6022      	streq	r2, [r4, #0]
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6004      	str	r4, [r0, #0]
 8003896:	e7ed      	b.n	8003874 <_free_r+0x24>
 8003898:	461a      	mov	r2, r3
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	b10b      	cbz	r3, 80038a2 <_free_r+0x52>
 800389e:	42a3      	cmp	r3, r4
 80038a0:	d9fa      	bls.n	8003898 <_free_r+0x48>
 80038a2:	6811      	ldr	r1, [r2, #0]
 80038a4:	1850      	adds	r0, r2, r1
 80038a6:	42a0      	cmp	r0, r4
 80038a8:	d10b      	bne.n	80038c2 <_free_r+0x72>
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	4401      	add	r1, r0
 80038ae:	1850      	adds	r0, r2, r1
 80038b0:	4283      	cmp	r3, r0
 80038b2:	6011      	str	r1, [r2, #0]
 80038b4:	d1de      	bne.n	8003874 <_free_r+0x24>
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4401      	add	r1, r0
 80038bc:	6011      	str	r1, [r2, #0]
 80038be:	6053      	str	r3, [r2, #4]
 80038c0:	e7d8      	b.n	8003874 <_free_r+0x24>
 80038c2:	d902      	bls.n	80038ca <_free_r+0x7a>
 80038c4:	230c      	movs	r3, #12
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	e7d4      	b.n	8003874 <_free_r+0x24>
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	1821      	adds	r1, r4, r0
 80038ce:	428b      	cmp	r3, r1
 80038d0:	bf01      	itttt	eq
 80038d2:	6819      	ldreq	r1, [r3, #0]
 80038d4:	685b      	ldreq	r3, [r3, #4]
 80038d6:	1809      	addeq	r1, r1, r0
 80038d8:	6021      	streq	r1, [r4, #0]
 80038da:	6063      	str	r3, [r4, #4]
 80038dc:	6054      	str	r4, [r2, #4]
 80038de:	e7c9      	b.n	8003874 <_free_r+0x24>
 80038e0:	bd38      	pop	{r3, r4, r5, pc}
 80038e2:	bf00      	nop
 80038e4:	2000014c 	.word	0x2000014c

080038e8 <_malloc_r>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	1ccd      	adds	r5, r1, #3
 80038ec:	f025 0503 	bic.w	r5, r5, #3
 80038f0:	3508      	adds	r5, #8
 80038f2:	2d0c      	cmp	r5, #12
 80038f4:	bf38      	it	cc
 80038f6:	250c      	movcc	r5, #12
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	4606      	mov	r6, r0
 80038fc:	db01      	blt.n	8003902 <_malloc_r+0x1a>
 80038fe:	42a9      	cmp	r1, r5
 8003900:	d903      	bls.n	800390a <_malloc_r+0x22>
 8003902:	230c      	movs	r3, #12
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	2000      	movs	r0, #0
 8003908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390a:	f000 f87d 	bl	8003a08 <__malloc_lock>
 800390e:	4921      	ldr	r1, [pc, #132]	; (8003994 <_malloc_r+0xac>)
 8003910:	680a      	ldr	r2, [r1, #0]
 8003912:	4614      	mov	r4, r2
 8003914:	b99c      	cbnz	r4, 800393e <_malloc_r+0x56>
 8003916:	4f20      	ldr	r7, [pc, #128]	; (8003998 <_malloc_r+0xb0>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b923      	cbnz	r3, 8003926 <_malloc_r+0x3e>
 800391c:	4621      	mov	r1, r4
 800391e:	4630      	mov	r0, r6
 8003920:	f000 f862 	bl	80039e8 <_sbrk_r>
 8003924:	6038      	str	r0, [r7, #0]
 8003926:	4629      	mov	r1, r5
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f85d 	bl	80039e8 <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d123      	bne.n	800397a <_malloc_r+0x92>
 8003932:	230c      	movs	r3, #12
 8003934:	4630      	mov	r0, r6
 8003936:	6033      	str	r3, [r6, #0]
 8003938:	f000 f86c 	bl	8003a14 <__malloc_unlock>
 800393c:	e7e3      	b.n	8003906 <_malloc_r+0x1e>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	1b5b      	subs	r3, r3, r5
 8003942:	d417      	bmi.n	8003974 <_malloc_r+0x8c>
 8003944:	2b0b      	cmp	r3, #11
 8003946:	d903      	bls.n	8003950 <_malloc_r+0x68>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	441c      	add	r4, r3
 800394c:	6025      	str	r5, [r4, #0]
 800394e:	e004      	b.n	800395a <_malloc_r+0x72>
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	42a2      	cmp	r2, r4
 8003954:	bf0c      	ite	eq
 8003956:	600b      	streq	r3, [r1, #0]
 8003958:	6053      	strne	r3, [r2, #4]
 800395a:	4630      	mov	r0, r6
 800395c:	f000 f85a 	bl	8003a14 <__malloc_unlock>
 8003960:	f104 000b 	add.w	r0, r4, #11
 8003964:	1d23      	adds	r3, r4, #4
 8003966:	f020 0007 	bic.w	r0, r0, #7
 800396a:	1ac2      	subs	r2, r0, r3
 800396c:	d0cc      	beq.n	8003908 <_malloc_r+0x20>
 800396e:	1a1b      	subs	r3, r3, r0
 8003970:	50a3      	str	r3, [r4, r2]
 8003972:	e7c9      	b.n	8003908 <_malloc_r+0x20>
 8003974:	4622      	mov	r2, r4
 8003976:	6864      	ldr	r4, [r4, #4]
 8003978:	e7cc      	b.n	8003914 <_malloc_r+0x2c>
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d0e3      	beq.n	800394c <_malloc_r+0x64>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f82e 	bl	80039e8 <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d1dd      	bne.n	800394c <_malloc_r+0x64>
 8003990:	e7cf      	b.n	8003932 <_malloc_r+0x4a>
 8003992:	bf00      	nop
 8003994:	2000014c 	.word	0x2000014c
 8003998:	20000150 	.word	0x20000150

0800399c <_realloc_r>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	4607      	mov	r7, r0
 80039a0:	4614      	mov	r4, r2
 80039a2:	460e      	mov	r6, r1
 80039a4:	b921      	cbnz	r1, 80039b0 <_realloc_r+0x14>
 80039a6:	4611      	mov	r1, r2
 80039a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039ac:	f7ff bf9c 	b.w	80038e8 <_malloc_r>
 80039b0:	b922      	cbnz	r2, 80039bc <_realloc_r+0x20>
 80039b2:	f7ff ff4d 	bl	8003850 <_free_r>
 80039b6:	4625      	mov	r5, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039bc:	f000 f830 	bl	8003a20 <_malloc_usable_size_r>
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d20f      	bcs.n	80039e4 <_realloc_r+0x48>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4638      	mov	r0, r7
 80039c8:	f7ff ff8e 	bl	80038e8 <_malloc_r>
 80039cc:	4605      	mov	r5, r0
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0f2      	beq.n	80039b8 <_realloc_r+0x1c>
 80039d2:	4631      	mov	r1, r6
 80039d4:	4622      	mov	r2, r4
 80039d6:	f7ff ff13 	bl	8003800 <memcpy>
 80039da:	4631      	mov	r1, r6
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff37 	bl	8003850 <_free_r>
 80039e2:	e7e9      	b.n	80039b8 <_realloc_r+0x1c>
 80039e4:	4635      	mov	r5, r6
 80039e6:	e7e7      	b.n	80039b8 <_realloc_r+0x1c>

080039e8 <_sbrk_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	2300      	movs	r3, #0
 80039ec:	4d05      	ldr	r5, [pc, #20]	; (8003a04 <_sbrk_r+0x1c>)
 80039ee:	4604      	mov	r4, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	f7fd fafc 	bl	8000ff0 <_sbrk>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_sbrk_r+0x1a>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_sbrk_r+0x1a>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000254 	.word	0x20000254

08003a08 <__malloc_lock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_lock+0x8>)
 8003a0a:	f000 b811 	b.w	8003a30 <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	2000025c 	.word	0x2000025c

08003a14 <__malloc_unlock>:
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <__malloc_unlock+0x8>)
 8003a16:	f000 b80c 	b.w	8003a32 <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	2000025c 	.word	0x2000025c

08003a20 <_malloc_usable_size_r>:
 8003a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a24:	1f18      	subs	r0, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfbc      	itt	lt
 8003a2a:	580b      	ldrlt	r3, [r1, r0]
 8003a2c:	18c0      	addlt	r0, r0, r3
 8003a2e:	4770      	bx	lr

08003a30 <__retarget_lock_acquire_recursive>:
 8003a30:	4770      	bx	lr

08003a32 <__retarget_lock_release_recursive>:
 8003a32:	4770      	bx	lr

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
